##########################################################################################################
# Macro that will define our source groups
##########################################################################################################
MACRO(GROUPSOURCES curdir)
    FILE(GLOB children RELATIVE ${CMAKE_CURRENT_LIST_DIR}/${curdir} ${CMAKE_CURRENT_LIST_DIR}/${curdir}/*)
    FOREACH(child ${children})
           IF(IS_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/${curdir}/${child})
              GROUPSOURCES(${curdir}/${child})
           ELSE()
              STRING(REPLACE "/" "\\" groupname ${curdir})
              STRING(REPLACE "." "src" groupname ${groupname})
              SOURCE_GROUP(${groupname} FILES ${CMAKE_CURRENT_LIST_DIR}/${curdir}/${child})
           ENDIF()
    ENDFOREACH()
ENDMACRO(GROUPSOURCES)

##########################################################################################################
#  Macro to setup install directories
##########################################################################################################
macro(SETUP_INSTALL_DIRECTORIES LIBNAME LIBEXPORTNAME UNITYVERSION)

install(TARGETS ${LIBNAME} EXPORT ${LIBEXPORTNAME}
    RUNTIME       DESTINATION "${SOPHIA_RUNTIME_INSTALL_DIR}/${UNITYVERSION}"
    LIBRARY       DESTINATION "${SOPHIA_LIBRARY_INSTALL_DIR}/${UNITYVERSION}"
    ARCHIVE       DESTINATION "${SOPHIA_ARCHIVE_INSTALL_DIR}/${UNITYVERSION}"
    FRAMEWORK     DESTINATION "${SOPHIA_FRAMEWORK_INSTALL_DIR}/${UNITYVERSION}")

endmacro(SETUP_INSTALL_DIRECTORIES)
##########################################################################################################
#  Macro to install directories
##########################################################################################################
macro(INSTALL_DIRECTORY INSTALLDIRECTORY INSTALLLOCATION)

install(DIRECTORY ${INSTALLDIRECTORY}
    DESTINATION ${INSTALLLOCATION}
    FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ WORLD_READ
    DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

endmacro(INSTALL_DIRECTORY)

##########################################################################################################
#  Macro to setup a library
##########################################################################################################
macro(SETUP_LIBRARY LIB_NAME)

# --------------------------
# Add preprocessor definitions
# --------------------------
STRING(TOUPPER ${LIB_NAME} UPPER_LIB_NAME)

add_definitions(-D${UPPER_LIB_NAME}_LIB)
add_definitions(-D${CMAKE_GENERATOR_PLATFORM})

# warning level 4 and all warnings as errors
add_compile_options(/W4 /WX)

endmacro(SETUP_LIBRARY)

##########################################################################################################
#  Macro to setup the project working directory
##########################################################################################################
macro(SETUP_WORKING_DIRECTORY LIB_NAME)

if(NOT ${CMAKE_VERSION} VERSION_LESS 3.8)
set_target_properties( ${LIB_NAME} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${OUTPUT_BINDIR}")
message(STATUS "Setting working directory for ${LIB_NAME} to ${OUTPUT_BINDIR}")
else()
message(WARNING "CMake version: ${CMAKE_VERSION}.\n" 
                "Only CMake version from 3.8 or higher are able to set the working directory.\n"
                "Content directory will not be copied, you should copy the content directory.\n"
                    "from:\n${PROJECT_SOURCE_DIR}/${CONTENT_DIR}\n"
                    "to:\n${PROJECT_BINARY_DIR}/${APPLICATIONS_DIR}/ \"your_application_name_here\" /${REX_BUILD_TARGET}/${CONTENT}")
endif()

endmacro(SETUP_WORKING_DIRECTORY)