{
  "api/Sophia.Algorithms.html": {
    "href": "api/Sophia.Algorithms.html",
    "title": "Class Algorithms | Sophia",
    "keywords": "Class Algorithms Inheritance Object Algorithms Namespace : Sophia Assembly : Sophia.Core.dll Syntax public static class Algorithms : object Methods | Improve this Doc View Source clamp(Double, Double, Double) Clamp a value between a min an a max value Declaration public static double clamp(double value, double min, double max) Parameters Type Name Description Double value The value to be clamped Double min Minimum value Double max Maximum value Returns Type Description Double The clamped value | Improve this Doc View Source clamp(Int32, Int32, Int32) Clamp a value between a min an a max value Declaration public static int clamp(int value, int min, int max) Parameters Type Name Description Int32 value The value to be clamped Int32 min Minimum value Int32 max Maximum value Returns Type Description Int32 The clamped value | Improve this Doc View Source clamp(Single, Single, Single) Clamp a value between a min an a max value Declaration public static float clamp(float value, float min, float max) Parameters Type Name Description Single value The value to be clamped Single min Minimum value Single max Maximum value Returns Type Description Single The clamped value"
  },
  "api/Sophia.BaseMonoBehaviour.html": {
    "href": "api/Sophia.BaseMonoBehaviour.html",
    "title": "Class BaseMonoBehaviour | Sophia",
    "keywords": "Class BaseMonoBehaviour Provides some additional functions for MonoBehaviour. Inheritance Object Object Component Behaviour MonoBehaviour BaseMonoBehaviour MonoBehaviourSingleton<T> PhysxMonoBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.networkView UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.ToString() Object.name Object.hideFlags Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class BaseMonoBehaviour : MonoBehaviour Properties | Improve this Doc View Source gameObject Declaration public GameObject gameObject { get; } Property Value Type Description GameObject | Improve this Doc View Source transform Declaration public Transform transform { get; } Property Value Type Description Transform Methods | Improve this Doc View Source changeLayersRecursively(Transform, Int32) Change the layer of an object and all it's childeren. Declaration public static void changeLayersRecursively(Transform trans, int layer) Parameters Type Name Description Transform trans The object that needs to change layer. Int32 layer ID of the layer we want to change too. | Improve this Doc View Source changeLayersRecursively(Transform, String) Change the layer of an object and all it's childeren. Declaration public static void changeLayersRecursively(Transform trans, string name) Parameters Type Name Description Transform trans The object that needs to change layer. String name Name of the layer we want to change too. | Improve this Doc View Source DestroyUniversal(Object) Destroys given object using either Object.Destroy, or Object.DestroyImmediate, depending on whether Application.isPlaying is true or not. This is useful when writing methods that is used by both editor tools and the game itself. Declaration public static void DestroyUniversal(Object obj) Parameters Type Name Description Object obj The object to destroy. | Improve this Doc View Source findObjectsOfInterface<I>() Similar to FindObjectsOfType, except that it looks for components that implement a specific interface. Declaration public static List<I> findObjectsOfInterface<I>() where I : class Returns Type Description List <I> Type Parameters Name Description I | Improve this Doc View Source getRequiredComponent<T>() Retrieve a component attached to this object. If the component is not present an assert is triggered. Declaration protected T getRequiredComponent<T>() where T : Component Returns Type Description T The requested component Type Parameters Name Description T Type of the component | Improve this Doc View Source getRequiredComponentInChilderen<T>() Retrieve a component attached to a child of this object. If the component is not present an assert is triggered. Declaration protected T getRequiredComponentInChilderen<T>() where T : Component Returns Type Description T The requested component Type Parameters Name Description T Type of the component | Improve this Doc View Source getRequiredComponentInParent<T>() Retrieve a component attached to the parent of this object If the component is not present an assert is triggered Declaration protected T getRequiredComponentInParent<T>() where T : Component Returns Type Description T The requested component Type Parameters Name Description T Type of the component | Improve this Doc View Source getRequiredComponentsInChilderen<T>() Retrieve a components attached to a child of this object. If the components are not present an assert is triggered. Declaration protected T[] getRequiredComponentsInChilderen<T>() where T : Component Returns Type Description T[] The requested components Type Parameters Name Description T Type of the components | Improve this Doc View Source instantiate(GameObject) Instantiates a prefab. Declaration public static GameObject instantiate(GameObject prefab) Parameters Type Name Description GameObject prefab The object. Returns Type Description GameObject GameObject. | Improve this Doc View Source instantiate(GameObject, GameObject) Instantiates a prefab and parents it to the root. Declaration public static GameObject instantiate(GameObject prefab, GameObject root) Parameters Type Name Description GameObject prefab The prefab. GameObject root The root. Returns Type Description GameObject GameObject. | Improve this Doc View Source instantiate(GameObject, Vector3, Quaternion) Instantiates the specified prefab. Declaration public static GameObject instantiate(GameObject prefab, Vector3 position, Quaternion rotation) Parameters Type Name Description GameObject prefab Vector3 position Quaternion rotation Returns Type Description GameObject | Improve this Doc View Source instantiate<T>(T, GameObject) Instantiates a prefab and attaches it to the given root. Declaration public static T instantiate<T>(T prefab, GameObject root) where T : Component Parameters Type Name Description T prefab GameObject root Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source instantiate<T>(T, GameObject, Vector3, Quaternion) Instantiates a prefab, attaches it to the given root, and sets the local position and rotation. Declaration public static T instantiate<T>(T prefab, GameObject root, Vector3 localPosition, Quaternion localRotation) where T : Component Parameters Type Name Description T prefab GameObject root Vector3 localPosition Quaternion localRotation Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Invoke(Action, Single) Declaration public Coroutine Invoke(Action action, float time) Parameters Type Name Description Action action Single time Returns Type Description Coroutine | Improve this Doc View Source InvokeRepeating(Action, Single, Single) Declaration public Coroutine InvokeRepeating(Action action, float time, float repeatTime) Parameters Type Name Description Action action Single time Single repeatTime Returns Type Description Coroutine Extension Methods MonoBehaviourExtensions.Clone<T>(T) MonoBehaviourExtensions.Clone<T>(T, Int32) MonoBehaviourExtensions.FindChild(Component, String) MonoBehaviourExtensions.FindChildRecursively(Component, String) MonoBehaviourExtensions.GetInterfaceComponent<TInterface>(Component) MonoBehaviourExtensions.Invoke(MonoBehaviour, Action, Single) MonoBehaviourExtensions.InvokeRepeating(MonoBehaviour, Action, Single, Single) ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.ColorList.html": {
    "href": "api/Sophia.ColorList.html",
    "title": "Class ColorList | Sophia",
    "keywords": "Class ColorList An InspectorList of type Color . Inheritance Object InspectorList InspectorList < Color > ColorList Implements IList < Color > Inherited Members InspectorList<Color>.Count InspectorList<Color>.IsReadOnly InspectorList<Color>.Item[Int32] InspectorList<Color>.GetEnumerator() InspectorList<Color>.Add(Color) InspectorList<Color>.Clear() InspectorList<Color>.Contains(Color) InspectorList<Color>.CopyTo(Color[], Int32) InspectorList<Color>.Remove(Color) InspectorList<Color>.IndexOf(Color) InspectorList<Color>.Insert(Int32, Color) InspectorList<Color>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class ColorList : InspectorList<Color>, IList<Color> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.CommentAttribute.html": {
    "href": "api/Sophia.CommentAttribute.html",
    "title": "Class CommentAttribute | Sophia",
    "keywords": "Class CommentAttribute Used to mark a field to add a comment above the field in the inspector. Inheritance Object PropertyAttribute CommentAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class CommentAttribute : PropertyAttribute Constructors | Improve this Doc View Source CommentAttribute(String, String) Declaration public CommentAttribute(string comment, string tooltip = \"\") Parameters Type Name Description String comment String tooltip Properties | Improve this Doc View Source Content Declaration public GUIContent Content { get; } Property Value Type Description GUIContent Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also PropertyAttribute"
  },
  "api/Sophia.CountDownTimer.html": {
    "href": "api/Sophia.CountDownTimer.html",
    "title": "Class CountDownTimer | Sophia",
    "keywords": "Class CountDownTimer Inheritance Object CountDownTimer Implements ITimer Namespace : Sophia Assembly : Sophia.Core.dll Syntax public class CountDownTimer : object, ITimer Properties | Improve this Doc View Source CurrentTime Declaration public float CurrentTime { get; } Property Value Type Description Single | Improve this Doc View Source IsPaused Declaration public bool IsPaused { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRunning Declaration public bool IsRunning { get; } Property Value Type Description Boolean | Improve this Doc View Source onFinished Declaration public Finished onFinished { get; set; } Property Value Type Description Finished | Improve this Doc View Source onStarted Declaration public Started onStarted { get; set; } Property Value Type Description Started | Improve this Doc View Source onStopped Declaration public Stopped onStopped { get; set; } Property Value Type Description Stopped | Improve this Doc View Source onUpdate Declaration public Updated onUpdate { get; set; } Property Value Type Description Updated | Improve this Doc View Source StartTime Declaration public float StartTime { get; } Property Value Type Description Single | Improve this Doc View Source TimerID Declaration public Guid TimerID { get; } Property Value Type Description Guid Methods | Improve this Doc View Source addTime(Single) Declaration public void addTime(float time) Parameters Type Name Description Single time | Improve this Doc View Source initialize(Single) Declaration public void initialize(float time) Parameters Type Name Description Single time | Improve this Doc View Source reset() Declaration public void reset() | Improve this Doc View Source reset(Single) Declaration public void reset(float time) Parameters Type Name Description Single time | Improve this Doc View Source reset(Single, Boolean) Declaration public void reset(float time, bool shouldStart) Parameters Type Name Description Single time Boolean shouldStart | Improve this Doc View Source start() Declaration public void start() | Improve this Doc View Source stop() Declaration public void stop() | Improve this Doc View Source togglePause() Declaration public void togglePause() | Improve this Doc View Source update(Single) Declaration public void update(float dTime) Parameters Type Name Description Single dTime Implements ITimer Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Diagnostics.html": {
    "href": "api/Sophia.Diagnostics.html",
    "title": "Namespace Sophia.Diagnostics | Sophia",
    "keywords": "Namespace Sophia.Diagnostics Classes Logger A class that will handle logging functionality inside Sophia This will handle support for externally generated loggers ( e.g.: UnityEngine.Debug ) Structs LoggerCreationInfo Function callbacks provided to \" log \" certain events."
  },
  "api/Sophia.Diagnostics.Logger.html": {
    "href": "api/Sophia.Diagnostics.Logger.html",
    "title": "Class Logger | Sophia",
    "keywords": "Class Logger A class that will handle logging functionality inside Sophia This will handle support for externally generated loggers ( e.g.: UnityEngine.Debug ) Inheritance Object Logger Namespace : Sophia.Diagnostics Assembly : Sophia.Core.dll Syntax public class Logger : object Constructors | Improve this Doc View Source Logger(LoggerCreationInfo) Constructor of this logger class Declaration public Logger(LoggerCreationInfo info) Parameters Type Name Description LoggerCreationInfo info Methods | Improve this Doc View Source error(String) Print an error Declaration public void error(string message) Parameters Type Name Description String message Message we would like to print | Improve this Doc View Source log(String) Print an information log Declaration public void log(string message) Parameters Type Name Description String message Message we would like to print | Improve this Doc View Source warning(String) Print a warning Declaration public void warning(string message) Parameters Type Name Description String message Message we would like to print Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Diagnostics.LoggerCreationInfo.html": {
    "href": "api/Sophia.Diagnostics.LoggerCreationInfo.html",
    "title": "Struct LoggerCreationInfo | Sophia",
    "keywords": "Struct LoggerCreationInfo Function callbacks provided to \" log \" certain events. Namespace : Sophia.Diagnostics Assembly : Sophia.Core.dll Syntax public struct LoggerCreationInfo Fields | Improve this Doc View Source error_function Declaration public Action<string> error_function Field Value Type Description Action < String > | Improve this Doc View Source log_function Declaration public Action<string> log_function Field Value Type Description Action < String > | Improve this Doc View Source print_to_diagnostic_listeners Writes the value of the object's System.Object.ToString method to the trace listeners in the System.Diagnostics.Debug.Listeners collection. Declaration public bool print_to_diagnostic_listeners Field Value Type Description Boolean | Improve this Doc View Source warn_function Declaration public Action<string> warn_function Field Value Type Description Action < String >"
  },
  "api/Sophia.DummyAttribute.html": {
    "href": "api/Sophia.DummyAttribute.html",
    "title": "Class DummyAttribute | Sophia",
    "keywords": "Class DummyAttribute Used to mark the last field in a MonoBehaviour This is useful to add a decorator that should be displayed below all fields. Inheritance Object PropertyAttribute DummyAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class DummyAttribute : PropertyAttribute Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also PropertyAttribute"
  },
  "api/Sophia.Editor.BaseEditor-1.html": {
    "href": "api/Sophia.Editor.BaseEditor-1.html",
    "title": "Class BaseEditor<T> | Sophia",
    "keywords": "Class BaseEditor<T> Class that can be used as a base class for custom editors with extra convenience methods and properties. Inheritance Object Object ScriptableObject Editor BaseEditor<T> BaseMonoBehaviourEditor Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) UnityEditor.Editor.CreateEditor(UnityEngine.Object) Editor.CreateEditor(Object, Type) UnityEditor.Editor.CreateEditor(UnityEngine.Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.OnInspectorGUI() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.ToString() Object.name Object.hideFlags Namespace : Sophia.Editor Assembly : Sophia.Editor.dll Syntax public class BaseEditor<T> : Editor, IPreviewable, IToolModeOwner where T : MonoBehaviour Type Parameters Name Description T The type this is an editor for. Properties | Improve this Doc View Source Target Declaration public T Target { get; } Property Value Type Description T | Improve this Doc View Source Targets Declaration public T[] Targets { get; } Property Value Type Description T[] Methods | Improve this Doc View Source addCombo(String[], Int32) Declaration public static int addCombo(string[] options, int selectedIndex) Parameters Type Name Description String [] options Int32 selectedIndex Returns Type Description Int32 | Improve this Doc View Source addField(SerializedProperty) Declaration protected void addField(SerializedProperty prop) Parameters Type Name Description SerializedProperty prop | Improve this Doc View Source addLabel(String, String) Declaration protected void addLabel(string title, string text) Parameters Type Name Description String title String text | Improve this Doc View Source addSplitter() Draws a line as a separator in the inspector. Declaration public void addSplitter() | Improve this Doc View Source addTextAndButton(String, String, Action) Declaration protected void addTextAndButton(string text, string buttonLabel, Action buttonAction) Parameters Type Name Description String text String buttonLabel Action buttonAction | Improve this Doc View Source arrayGUI(SerializedObject, SerializedProperty) Declaration protected void arrayGUI(SerializedObject obj, SerializedProperty property) Parameters Type Name Description SerializedObject obj SerializedProperty property | Improve this Doc View Source drawInspectorButtons(Int32) Draws the buttons in the inspector for all method in the target class that are marked with the InspectorButtonAttribute. Declaration protected void drawInspectorButtons(int columnCount) Parameters Type Name Description Int32 columnCount The number of columns to draw the buttons in. | Improve this Doc View Source hasProperty(String) Declaration public bool hasProperty(string propertyName) Parameters Type Name Description String propertyName Returns Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also Editor"
  },
  "api/Sophia.Editor.BaseEditorHelpers.html": {
    "href": "api/Sophia.Editor.BaseEditorHelpers.html",
    "title": "Class BaseEditorHelpers | Sophia",
    "keywords": "Class BaseEditorHelpers Functions to supplement Unity EditorGUI functions. Inheritance Object BaseEditorHelpers Namespace : Sophia.Editor Assembly : Sophia.Editor.dll Syntax public static class BaseEditorHelpers : object Fields | Improve this Doc View Source LineStyle Declaration public static readonly GUIStyle LineStyle Field Value Type Description GUIStyle | Improve this Doc View Source SplitterStyle Declaration public static readonly GUIStyle SplitterStyle Field Value Type Description GUIStyle Methods | Improve this Doc View Source splitter(Single) Declaration public static void splitter(float thickness = null) Parameters Type Name Description Single thickness | Improve this Doc View Source splitter(Single, GUIStyle) Declaration public static void splitter(float thickness, GUIStyle splitterStyle) Parameters Type Name Description Single thickness GUIStyle splitterStyle | Improve this Doc View Source splitter(Color, Single) Declaration public static void splitter(Color rgb, float thickness = null) Parameters Type Name Description Color rgb Single thickness | Improve this Doc View Source splitter(Rect) Declaration public static void splitter(Rect position) Parameters Type Name Description Rect position | Improve this Doc View Source verticalLine() Declaration public static void verticalLine() | Improve this Doc View Source verticalLine(Single, GUIStyle) Declaration public static void verticalLine(float thickness, GUIStyle splitterStyle) Parameters Type Name Description Single thickness GUIStyle splitterStyle | Improve this Doc View Source verticalLine(Color, Single) Declaration public static void verticalLine(Color color, float thickness = null) Parameters Type Name Description Color color Single thickness"
  },
  "api/Sophia.Editor.BaseMonoBehaviourEditor.html": {
    "href": "api/Sophia.Editor.BaseMonoBehaviourEditor.html",
    "title": "Class BaseMonoBehaviourEditor | Sophia",
    "keywords": "Class BaseMonoBehaviourEditor This universal editor makes it possible to add buttons that will execute static methods to the inspector by adding the InspectorButton attribute to the method. Inheritance Object Object ScriptableObject Editor BaseEditor < BaseMonoBehaviour > BaseMonoBehaviourEditor Inherited Members BaseEditor<BaseMonoBehaviour>.Target BaseEditor<BaseMonoBehaviour>.Targets BaseEditor<BaseMonoBehaviour>.hasProperty(String) BaseEditor<BaseMonoBehaviour>.addSplitter() BaseEditor<BaseMonoBehaviour>.addCombo(String[], Int32) BaseEditor<BaseMonoBehaviour>.addField(SerializedProperty) BaseEditor<BaseMonoBehaviour>.addLabel(String, String) BaseEditor<BaseMonoBehaviour>.addTextAndButton(String, String, Action) BaseEditor<BaseMonoBehaviour>.arrayGUI(SerializedObject, SerializedProperty) BaseEditor<BaseMonoBehaviour>.drawInspectorButtons(Int32) Editor.CreateEditorWithContext(Object[], Object, Type) UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) UnityEditor.Editor.CreateEditor(UnityEngine.Object) Editor.CreateEditor(Object, Type) UnityEditor.Editor.CreateEditor(UnityEngine.Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.ToString() Object.name Object.hideFlags Namespace : Sophia.Editor Assembly : Sophia.Editor.dll Syntax public class BaseMonoBehaviourEditor : BaseEditor<BaseMonoBehaviour>, IPreviewable, IToolModeOwner Remarks You can also add this behaviour to your own editor by extending from BaseEditor, and calling DrawInspectorButtons. Methods | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI() Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.CommentPropertyDrawer.html": {
    "href": "api/Sophia.Editor.CommentPropertyDrawer.html",
    "title": "Class CommentPropertyDrawer | Sophia",
    "keywords": "Class CommentPropertyDrawer A property drawer for fields marked with the CommentAttribute. Similar to Header, but useful for longer descriptions. Inheritance Object GUIDrawer DecoratorDrawer CommentPropertyDrawer Inherited Members DecoratorDrawer.CanCacheInspectorGUI() DecoratorDrawer.attribute Namespace : Sophia.Editor Assembly : Sophia.Editor.dll Syntax public class CommentPropertyDrawer : DecoratorDrawer Methods | Improve this Doc View Source GetHeight() Declaration public override float GetHeight() Returns Type Description Single Overrides DecoratorDrawer.GetHeight() | Improve this Doc View Source OnGUI(Rect) Declaration public override void OnGUI(Rect position) Parameters Type Name Description Rect position Overrides DecoratorDrawer.OnGUI(Rect) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.DummyPorpertyDrawer.html": {
    "href": "api/Sophia.Editor.DummyPorpertyDrawer.html",
    "title": "Class DummyPorpertyDrawer | Sophia",
    "keywords": "Class DummyPorpertyDrawer Draws a property marked with the Dummy attribute (that is, does not draw it). Inheritance Object GUIDrawer PropertyDrawer DummyPorpertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor Assembly : Sophia.Editor.dll Syntax public class DummyPorpertyDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters Type Name Description SerializedProperty prop GUIContent label Returns Type Description Single Overrides PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty prop, GUIContent label) Parameters Type Name Description Rect position SerializedProperty prop GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.EditorStartup.html": {
    "href": "api/Sophia.Editor.EditorStartup.html",
    "title": "Class EditorStartup | Sophia",
    "keywords": "Class EditorStartup Inheritance Object EditorStartup Namespace : Sophia.Editor Assembly : Sophia.Editor.dll Syntax public class EditorStartup : object Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.html": {
    "href": "api/Sophia.Editor.html",
    "title": "Namespace Sophia.Editor | Sophia",
    "keywords": "Namespace Sophia.Editor Classes BaseEditor<T> Class that can be used as a base class for custom editors with extra convenience methods and properties. BaseEditorHelpers Functions to supplement Unity EditorGUI functions. BaseMonoBehaviourEditor This universal editor makes it possible to add buttons that will execute static methods to the inspector by adding the InspectorButton attribute to the method. CommentPropertyDrawer A property drawer for fields marked with the CommentAttribute. Similar to Header, but useful for longer descriptions. DummyPorpertyDrawer Draws a property marked with the Dummy attribute (that is, does not draw it). EditorStartup"
  },
  "api/Sophia.Editor.PropertyDrawers.HighlightPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.HighlightPropertyDrawer.html",
    "title": "Class HighlightPropertyDrawer | Sophia",
    "keywords": "Class HighlightPropertyDrawer A property drawer for fields marked with the Highlight Attribute. Inheritance Object GUIDrawer PropertyDrawer HighlightPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class HighlightPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.PropertyDrawers.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.html",
    "title": "Namespace Sophia.Editor.PropertyDrawers | Sophia",
    "keywords": "Namespace Sophia.Editor.PropertyDrawers Classes HighlightPropertyDrawer A property drawer for fields marked with the Highlight Attribute. InspectorFlagsPropertyDrawer A property drawer for fields marked with the InspectorFlags Attribute. InspectorListPropertyDrawer A property drawer for type InspectorList. LabelFieldPropertyDrawer Property drawer for the label field attribute. MinMaxFloatPropertyDrawer A property drawer for the MinMaxFloat class. NonNegativePropertyDrawer A property drawer for fields marked with the NonNegative Attribute. OptionalPropertyDrawer Class for drawing a field of type Optional in the inspector. ReadOnlyPropertyDrawer A property drawer that can be used for read-only fields in the inspector. WarningIfNullPropertyDrawer Property drawer for fields marked with the WarnIfNull."
  },
  "api/Sophia.Editor.PropertyDrawers.InspectorFlagsPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.InspectorFlagsPropertyDrawer.html",
    "title": "Class InspectorFlagsPropertyDrawer | Sophia",
    "keywords": "Class InspectorFlagsPropertyDrawer A property drawer for fields marked with the InspectorFlags Attribute. Inheritance Object GUIDrawer PropertyDrawer InspectorFlagsPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class InspectorFlagsPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty prop, GUIContent label) Parameters Type Name Description Rect position SerializedProperty prop GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.PropertyDrawers.InspectorListPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.InspectorListPropertyDrawer.html",
    "title": "Class InspectorListPropertyDrawer | Sophia",
    "keywords": "Class InspectorListPropertyDrawer A property drawer for type InspectorList. Inheritance Object GUIDrawer PropertyDrawer InspectorListPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class InspectorListPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single Overrides PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.PropertyDrawers.LabelFieldPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.LabelFieldPropertyDrawer.html",
    "title": "Class LabelFieldPropertyDrawer | Sophia",
    "keywords": "Class LabelFieldPropertyDrawer Property drawer for the label field attribute. Inheritance Object GUIDrawer PropertyDrawer LabelFieldPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class LabelFieldPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single Overrides PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also PropertyDrawer"
  },
  "api/Sophia.Editor.PropertyDrawers.MinMaxFloatPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.MinMaxFloatPropertyDrawer.html",
    "title": "Class MinMaxFloatPropertyDrawer | Sophia",
    "keywords": "Class MinMaxFloatPropertyDrawer A property drawer for the MinMaxFloat class. Inheritance Object GUIDrawer PropertyDrawer MinMaxFloatPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class MinMaxFloatPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.PropertyDrawers.NonNegativePropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.NonNegativePropertyDrawer.html",
    "title": "Class NonNegativePropertyDrawer | Sophia",
    "keywords": "Class NonNegativePropertyDrawer A property drawer for fields marked with the NonNegative Attribute. Inheritance Object GUIDrawer PropertyDrawer NonNegativePropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class NonNegativePropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.PropertyDrawers.OptionalPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.OptionalPropertyDrawer.html",
    "title": "Class OptionalPropertyDrawer | Sophia",
    "keywords": "Class OptionalPropertyDrawer Class for drawing a field of type Optional in the inspector. Inheritance Object GUIDrawer PropertyDrawer OptionalPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class OptionalPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single Overrides PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Editor.PropertyDrawers.ReadOnlyPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.ReadOnlyPropertyDrawer.html",
    "title": "Class ReadOnlyPropertyDrawer | Sophia",
    "keywords": "Class ReadOnlyPropertyDrawer A property drawer that can be used for read-only fields in the inspector. Inheritance Object GUIDrawer PropertyDrawer ReadOnlyPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class ReadOnlyPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single Overrides PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also PropertyDrawer"
  },
  "api/Sophia.Editor.PropertyDrawers.WarningIfNullPropertyDrawer.html": {
    "href": "api/Sophia.Editor.PropertyDrawers.WarningIfNullPropertyDrawer.html",
    "title": "Class WarningIfNullPropertyDrawer | Sophia",
    "keywords": "Class WarningIfNullPropertyDrawer Property drawer for fields marked with the WarnIfNull. Inheritance Object GUIDrawer PropertyDrawer WarningIfNullPropertyDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo Namespace : Sophia.Editor.PropertyDrawers Assembly : Sophia.Editor.dll Syntax public class WarningIfNullPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single Overrides PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Overrides PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent) Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also PropertyDrawer"
  },
  "api/Sophia.Events.Event.html": {
    "href": "api/Sophia.Events.Event.html",
    "title": "Class Event | Sophia",
    "keywords": "Class Event Abstract class of all events Inheritance Object Event Implements IEvent Namespace : Sophia.Events Assembly : Sophia.Core.dll Syntax public abstract class Event : object, IEvent Constructors | Improve this Doc View Source Event(IEventSender) Constructor of an abstract event Declaration protected Event(IEventSender s) Parameters Type Name Description IEventSender s Instigator of the event Properties | Improve this Doc View Source EventCategory The category of the event Declaration public abstract int EventCategory { get; } Property Value Type Description Int32 | Improve this Doc View Source EventType The type of the event Declaration public abstract int EventType { get; } Property Value Type Description Int32 | Improve this Doc View Source Sender The instigator of the event Declaration public IEventSender Sender { get; } Property Value Type Description IEventSender Implements IEvent Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Events.EventDispatch.html": {
    "href": "api/Sophia.Events.EventDispatch.html",
    "title": "Class EventDispatch | Sophia",
    "keywords": "Class EventDispatch An event dispatcher Inheritance Object EventDispatch Namespace : Sophia.Events Assembly : Sophia.Core.dll Syntax public class EventDispatch : object Constructors | Improve this Doc View Source EventDispatch() Constructor of the event dispatcher Declaration public EventDispatch() Methods | Improve this Doc View Source dispatch(IEvent) Fire this function to dispatch an event to all subscribed handlers Declaration public bool dispatch(IEvent evt) Parameters Type Name Description IEvent evt The event to be dispatched Returns Type Description Boolean If the event was handled by one of the handlers this will return true, otherwise it will return false | Improve this Doc View Source subscribe(IEventHandler) Subscribe ourself to the event dispatcher This will make sure the handler is notified when an event is fired Declaration public void subscribe(IEventHandler handler) Parameters Type Name Description IEventHandler handler The event handler to be notified | Improve this Doc View Source unsubscribe(IEventHandler) Un-subscribe ourself from this event dispatcher This will remove the handler from being notified when an event is fired Declaration public void unsubscribe(IEventHandler handler) Parameters Type Name Description IEventHandler handler The handler to be unsubscribed Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Events.html": {
    "href": "api/Sophia.Events.html",
    "title": "Namespace Sophia.Events | Sophia",
    "keywords": "Namespace Sophia.Events Classes Event Abstract class of all events EventDispatch An event dispatcher Interfaces IEvent Interface of what an event should look like IEventHandler Interface of an event handler IEventSender An interface for event instigators"
  },
  "api/Sophia.Events.IEvent.html": {
    "href": "api/Sophia.Events.IEvent.html",
    "title": "Interface IEvent | Sophia",
    "keywords": "Interface IEvent Interface of what an event should look like Namespace : Sophia.Events Assembly : Sophia.Core.dll Syntax public interface IEvent Properties | Improve this Doc View Source EventCategory The category of the event Declaration int EventCategory { get; } Property Value Type Description Int32 | Improve this Doc View Source EventType The type of the event Declaration int EventType { get; } Property Value Type Description Int32 | Improve this Doc View Source Sender The instigator of the event Declaration IEventSender Sender { get; } Property Value Type Description IEventSender Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Events.IEventHandler.html": {
    "href": "api/Sophia.Events.IEventHandler.html",
    "title": "Interface IEventHandler | Sophia",
    "keywords": "Interface IEventHandler Interface of an event handler Namespace : Sophia.Events Assembly : Sophia.Core.dll Syntax public interface IEventHandler Properties | Improve this Doc View Source EventCategory If the event that is fired is equal to the event category of the handler The event will be passed along, otherwise this handler will be skipped Declaration int EventCategory { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source handleEvent(IEvent) Function to be called when we process an event Declaration bool handleEvent(IEvent evt) Parameters Type Name Description IEvent evt The event being processed Returns Type Description Boolean True if the event was handled, false if it wasn't handled Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Events.IEventSender.html": {
    "href": "api/Sophia.Events.IEventSender.html",
    "title": "Interface IEventSender | Sophia",
    "keywords": "Interface IEventSender An interface for event instigators Namespace : Sophia.Events Assembly : Sophia.Core.dll Syntax public interface IEventSender Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Extensions.ArrayExtensions.html": {
    "href": "api/Sophia.Extensions.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Sophia",
    "keywords": "Class ArrayExtensions Inheritance Object ArrayExtensions Namespace : Sophia.Extensions Assembly : Sophia.Core.dll Syntax public static class ArrayExtensions : object Methods | Improve this Doc View Source concat<T>(T[], T[]) Concatenate 2 arrays to each other Declaration public static T[] concat<T>(this T[] array, T[] other) Parameters Type Name Description T[] array The array we operator on T[] other The other array we would like to concatenate Returns Type Description T[] return the new array Type Parameters Name Description T Type of the array"
  },
  "api/Sophia.Extensions.CollectionExtensions.html": {
    "href": "api/Sophia.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Sophia",
    "keywords": "Class CollectionExtensions This class provides useful extension methods for collections, mostly IEnumerable. Inheritance Object CollectionExtensions Namespace : Sophia.Extensions Assembly : Sophia.Core.dll Syntax public static class CollectionExtensions : object Methods | Improve this Doc View Source addRange<T>(ICollection<T>, IEnumerable<T>) Add all elements of other to the given source. Declaration public static void addRange<T>(this ICollection<T> collection, IEnumerable<T> other) Parameters Type Name Description ICollection <T> collection IEnumerable <T> other Type Parameters Name Description T | Improve this Doc View Source butFirst<T>(IEnumerable<T>) Returns an enumerable of all elements of the given list but the first, keeping them in order. Declaration public static IEnumerable<T> butFirst<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source butLast<T>(IEnumerable<T>) Returns an enumerable of all elements in the given list but the last, keeping them in order. Declaration public static IEnumerable<T> butLast<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source filterByType<T, TFilter>(IEnumerable<T>) Returns all elements of the source which are of FilterType. Declaration public static IEnumerable<TFilter> filterByType<T, TFilter>(this IEnumerable<T> source) where T : class where TFilter : class, T Parameters Type Name Description IEnumerable <T> source Returns Type Description IEnumerable <TFilter> Type Parameters Name Description T TFilter | Improve this Doc View Source isEmpty<T>(ICollection<T>) Returns whether this source is empty. Declaration public static bool isEmpty<T>(this ICollection<T> collection) Parameters Type Name Description ICollection <T> collection Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source listToString<T>(IEnumerable<T>) Returns a pretty string representation of the given list. The resulting string looks something like [a, b, c] . Declaration public static string listToString<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source randomItem<T>(IEnumerable<T>) Returns a random element from a source. Declaration public static T randomItem<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source The list. Returns Type Description T A item ramdonly selected from the source. Type Parameters Name Description T The type of items generated from the source. | Improve this Doc View Source randomItem<T>(IEnumerable<T>, IRandom) Returns a random element from a source. Declaration public static T randomItem<T>(this IEnumerable<T> source, IRandom random) Parameters Type Name Description IEnumerable <T> source The list. IRandom random The random generator to use. Returns Type Description T A item randomly selected from the source. Type Parameters Name Description T The type of items generated from the source. | Improve this Doc View Source removeAllBut<T>(List<T>, Predicate<T>) Removes all the elements in the list that does not satisfy the predicate. Declaration public static void removeAllBut<T>(this List<T> source, Predicate<T> predicate) Parameters Type Name Description List <T> source The list to remove elements from. Predicate <T> predicate The predicate used to filter elements. All elements that don't satisfy the predicate will be matched. Type Parameters Name Description T The type of elements in the list. | Improve this Doc View Source rotateLeft<T>(IEnumerable<T>) Returns a enumerable with elements in order, but the first element is moved to the end. Declaration public static IEnumerable<T> rotateLeft<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source rotateRight<T>(IEnumerable<T>) Returns a enumerable with elements in order, but the last element is moved to the front. Declaration public static IEnumerable<T> rotateRight<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source sampleRandom<T>(IEnumerable<T>, Int32) Returns a random sample from a source. Declaration public static IEnumerable<T> sampleRandom<T>(this IEnumerable<T> source, int sampleCount) Parameters Type Name Description IEnumerable <T> source The source from which to sample. Int32 sampleCount The number of samples to return. Returns Type Description IEnumerable <T> Generates a ransom subset from a given source. Type Parameters Name Description T The type of elements of the source. | Improve this Doc View Source sampleRandom<T>(IEnumerable<T>, Int32, IRandom) Returns a random sample from a source. Declaration public static IEnumerable<T> sampleRandom<T>(this IEnumerable<T> source, int sampleCount, IRandom random) Parameters Type Name Description IEnumerable <T> source The source from which to sample. Int32 sampleCount The number of samples to return. IRandom random The random generator to use. Returns Type Description IEnumerable <T> Generates a ransom subset from a given source. Type Parameters Name Description T The type of elements of the source. | Improve this Doc View Source shuffle<T>(IList<T>) Shuffles a list. Declaration public static void shuffle<T>(this IList<T> list) Parameters Type Name Description IList <T> list The list to shuffle. Type Parameters Name Description T The type of items in the list. | Improve this Doc View Source shuffle<T>(IList<T>, IRandom) Shuffles a list. Declaration public static void shuffle<T>(this IList<T> list, IRandom random) Parameters Type Name Description IList <T> list The list to shuffle. IRandom random The random generator to use. Type Parameters Name Description T The type of items in the list. | Improve this Doc View Source takeLast<T>(IEnumerable<T>, Int32) Returns the last n elements from a source. Declaration public static IEnumerable<T> takeLast<T>(this IEnumerable<T> source, int n) Parameters Type Name Description IEnumerable <T> source Int32 n Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Sophia.Extensions.ColorExtensions.html": {
    "href": "api/Sophia.Extensions.ColorExtensions.html",
    "title": "Class ColorExtensions | Sophia",
    "keywords": "Class ColorExtensions Provides some utility functions for Colors. Inheritance Object ColorExtensions Namespace : Sophia.Extensions Assembly : Sophia.Platform.dll Syntax public static class ColorExtensions : object Methods | Improve this Doc View Source Brightness(Color) Returns the brightness of the color, defined as the average off the three color channels. Declaration public static float Brightness(this Color color) Parameters Type Name Description Color color Returns Type Description Single | Improve this Doc View Source Darker(Color) Returns a color darker than the given color. Declaration public static Color Darker(this Color color) Parameters Type Name Description Color color Returns Type Description Color | Improve this Doc View Source Invert(Color) Returns a new color that is this color inverted. Declaration public static Color Invert(this Color color) Parameters Type Name Description Color color The color to invert. Returns Type Description Color | Improve this Doc View Source IsApproximatelyBlack(Color) Returns whether the color is black or almost black. Declaration public static bool IsApproximatelyBlack(this Color color) Parameters Type Name Description Color color Returns Type Description Boolean | Improve this Doc View Source IsApproximatelyWhite(Color) Returns whether the color is white or almost white. Declaration public static bool IsApproximatelyWhite(this Color color) Parameters Type Name Description Color color Returns Type Description Boolean | Improve this Doc View Source Lighter(Color) Returns a color lighter than the given color. Declaration public static Color Lighter(this Color color) Parameters Type Name Description Color color Returns Type Description Color | Improve this Doc View Source Opaque(Color) Returns an opaque version of the given color. Declaration public static Color Opaque(this Color color) Parameters Type Name Description Color color Returns Type Description Color | Improve this Doc View Source WithAlpha(Color, Single) Returns the same color, but with the specified alpha. Declaration public static Color WithAlpha(this Color color, float alpha) Parameters Type Name Description Color color The color. Single alpha The alpha. Returns Type Description Color Color. | Improve this Doc View Source WithBrightness(Color, Single) Returns a new color with the RGB values scaled so that the color has the given brightness. Declaration public static Color WithBrightness(this Color color, float brightness) Parameters Type Name Description Color color Single brightness Returns Type Description Color Remarks If the color is too dark, a grey is returned with the right brightness. The alpha is left unchanged."
  },
  "api/Sophia.Extensions.html": {
    "href": "api/Sophia.Extensions.html",
    "title": "Namespace Sophia.Extensions | Sophia",
    "keywords": "Namespace Sophia.Extensions Classes ArrayExtensions CollectionExtensions This class provides useful extension methods for collections, mostly IEnumerable. ColorExtensions Provides some utility functions for Colors. ListExtentions MonoBehaviourExtensions Provides useful extension methods for MonoBehaviours. ObjectExtensions Provides extensions for objects. StringExtensions Class for string extensions. TransformExtensions Contains useful extensions for Select. VectorExtensions Contains useful extension methods for vectors."
  },
  "api/Sophia.Extensions.ListExtentions.html": {
    "href": "api/Sophia.Extensions.ListExtentions.html",
    "title": "Class ListExtentions | Sophia",
    "keywords": "Class ListExtentions Inheritance Object ListExtentions Namespace : Sophia.Extensions Assembly : Sophia.Core.dll Syntax public static class ListExtentions : object Methods | Improve this Doc View Source back<T>(IList<T>) Take the last element in a list Declaration public static T back<T>(this IList<T> list) Parameters Type Name Description IList <T> list The given list Returns Type Description T The last element in this list, if no items are in the list a default value of T will be returned Type Parameters Name Description T Type of the list | Improve this Doc View Source front<T>(IList<T>) Take the first element in a list Declaration public static T front<T>(this IList<T> list) Parameters Type Name Description IList <T> list The given list Returns Type Description T The first element in this list, if no items are in the list a default value of T will be returned Type Parameters Name Description T Type of the list"
  },
  "api/Sophia.Extensions.MonoBehaviourExtensions.html": {
    "href": "api/Sophia.Extensions.MonoBehaviourExtensions.html",
    "title": "Class MonoBehaviourExtensions | Sophia",
    "keywords": "Class MonoBehaviourExtensions Provides useful extension methods for MonoBehaviours. Inheritance Object MonoBehaviourExtensions Namespace : Sophia.Extensions Assembly : Sophia.Platform.dll Syntax public static class MonoBehaviourExtensions : object Methods | Improve this Doc View Source Clone<T>(T) Clones an object. Declaration public static T Clone<T>(this T obj) where T : MonoBehaviour Parameters Type Name Description T obj Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Clone<T>(T, Int32) Clones an object. Declaration public static List<T> Clone<T>(this T obj, int count) where T : MonoBehaviour Parameters Type Name Description T obj Int32 count Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source FindChild(Component, String) Find a child of this component Declaration public static GameObject FindChild(this Component component, string childName) Parameters Type Name Description Component component String childName Name of the child we are looking for Returns Type Description GameObject The returned child, null if no child was found | Improve this Doc View Source FindChildRecursively(Component, String) /// Find a child of this component recursively Declaration public static GameObject FindChildRecursively(this Component component, string childName) Parameters Type Name Description Component component String childName Name of the child we are looking for Returns Type Description GameObject The returned child, null if no child was found | Improve this Doc View Source GetInterfaceComponent<TInterface>(Component) Gets an attached component that implements the interface of the type parameter. Declaration public static TInterface GetInterfaceComponent<TInterface>(this Component thisComponent) where TInterface : class Parameters Type Name Description Component thisComponent The this component. Returns Type Description TInterface TInterface. Type Parameters Name Description TInterface The type of the t interface. | Improve this Doc View Source Invoke(MonoBehaviour, Action, Single) Invokes the given action after the given amount of time. Declaration public static Coroutine Invoke(this MonoBehaviour monoBehaviour, Action action, float time) Parameters Type Name Description MonoBehaviour monoBehaviour Action action Single time Returns Type Description Coroutine | Improve this Doc View Source InvokeRepeating(MonoBehaviour, Action, Single, Single) Invokes the given action after the given amount of time, and repeats the action after every repeatTime seconds. Declaration public static Coroutine InvokeRepeating(this MonoBehaviour monoBehaviour, Action action, float time, float repeatTime) Parameters Type Name Description MonoBehaviour monoBehaviour Action action Single time Single repeatTime Returns Type Description Coroutine"
  },
  "api/Sophia.Extensions.ObjectExtensions.html": {
    "href": "api/Sophia.Extensions.ObjectExtensions.html",
    "title": "Class ObjectExtensions | Sophia",
    "keywords": "Class ObjectExtensions Provides extensions for objects. Inheritance Object ObjectExtensions Namespace : Sophia.Extensions Assembly : Sophia.Platform.dll Syntax public static class ObjectExtensions : object Methods | Improve this Doc View Source ThrowIfNegative(Int32, String) Throws a ArgumentOutOfRange exception if the integer is negative. Declaration public static void ThrowIfNegative(this int n, string name) Parameters Type Name Description Int32 n The integer to check. String name The name of the variable. | Improve this Doc View Source ThrowIfNegative(Single, String) Throws a ArgumentOutOfRange exception if the float is negative. Declaration public static void ThrowIfNegative(float x, string name) Parameters Type Name Description Single x The float to check. String name The name of the variable. | Improve this Doc View Source ThrowIfNull(Object, String) Throws a NullReferenceException if the object is null. Declaration public static void ThrowIfNull(this object o, string name) Parameters Type Name Description Object o An object to check. String name The name of the variable this methods is called on."
  },
  "api/Sophia.Extensions.StringExtensions.html": {
    "href": "api/Sophia.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Sophia",
    "keywords": "Class StringExtensions Class for string extensions. Inheritance Object StringExtensions Namespace : Sophia.Extensions Assembly : Sophia.Platform.dll Syntax public static class StringExtensions : object Methods | Improve this Doc View Source SplitCamelCase(String) Takes a string in camel case, split it into separate words, and capitalizes each word. Declaration public static string SplitCamelCase(this string str) Parameters Type Name Description String str Returns Type Description String"
  },
  "api/Sophia.Extensions.TransformExtensions.html": {
    "href": "api/Sophia.Extensions.TransformExtensions.html",
    "title": "Class TransformExtensions | Sophia",
    "keywords": "Class TransformExtensions Contains useful extensions for Select. Inheritance Object TransformExtensions Namespace : Sophia.Extensions Assembly : Sophia.Platform.dll Syntax public static class TransformExtensions : object Methods | Improve this Doc View Source DestroyChildren(Transform) Retrieve all children from this transform and destroy them. Declaration public static void DestroyChildren(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source DestroyChildrenImmediate(Transform) Retrieve all children from this transform and destroy them. Declaration public static void DestroyChildrenImmediate(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source DestroyChildrenUniversal(Transform) Retrieve all children from this transform and destroy them. Declaration public static void DestroyChildrenUniversal(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipPostive(Transform) Sets all scale values to the absolute values. Declaration public static void FlipPostive(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipX(Transform) Negates the X scale. Declaration public static void FlipX(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipXY(Transform) Negates the X and Y scale. Declaration public static void FlipXY(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipXYZ(Transform) Negates the X, Y and Z scale. Declaration public static void FlipXYZ(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipXZ(Transform) Negates the X and Z scale. Declaration public static void FlipXZ(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipY(Transform) Negates the Y scale. Declaration public static void FlipY(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipYZ(Transform) Negates the Y and Z scale. Declaration public static void FlipYZ(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source FlipZ(Transform) Negates the Z scale. Declaration public static void FlipZ(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source GetChildren(Transform) Retrieve all children of this transform Declaration public static List<Transform> GetChildren(this Transform transform) Parameters Type Name Description Transform transform Returns Type Description List < Transform > | Improve this Doc View Source Reset(Transform) Resets the position, rotation, and local scale. Declaration public static void Reset(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source ResetLocal(Transform) Resets the ;local position, local rotation, and local scale. Declaration public static void ResetLocal(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source ResetLocalPosition(Transform) Sets the local position to 0, 0, 0. Declaration public static void ResetLocalPosition(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source ResetLocalRotation(Transform) Resets the local rotation to 0, 0, 0. Declaration public static void ResetLocalRotation(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source ResetPosition(Transform) Sets the position to 0, 0, 0. Declaration public static void ResetPosition(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source ResetRotation(Transform) Resets the rotation to 0, 0, 0. Declaration public static void ResetRotation(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source ResetScale(Transform) Resets the local scale of this transform in to 1 1 1. Declaration public static void ResetScale(this Transform transform) Parameters Type Name Description Transform transform | Improve this Doc View Source RotateAroundX(Transform, Single) Rotates the transform around the X axis. Declaration public static void RotateAroundX(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source RotateAroundY(Transform, Single) Rotates the transform around the Y axis. Declaration public static void RotateAroundY(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source RotateAroundZ(Transform, Single) Rotates the transform around the Z axis. Declaration public static void RotateAroundZ(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source ScaleByX(Transform, Single) Scale this transform in the X direction. Declaration public static void ScaleByX(this Transform transform, float x) Parameters Type Name Description Transform transform Single x | Improve this Doc View Source ScaleByXY(Transform, Single) Scale this transform in the X and Y directions. Declaration public static void ScaleByXY(this Transform transform, float r) Parameters Type Name Description Transform transform Single r | Improve this Doc View Source ScaleByXY(Transform, Single, Single) Scale this transform in the X, Y direction. Declaration public static void ScaleByXY(this Transform transform, float x, float y) Parameters Type Name Description Transform transform Single x Single y | Improve this Doc View Source ScaleByXYZ(Transform, Single) Scale this transform in the X, Y and Z directions. Declaration public static void ScaleByXYZ(this Transform transform, float r) Parameters Type Name Description Transform transform Single r | Improve this Doc View Source ScaleByXYZ(Transform, Single, Single, Single) Scale this transform in the X, Y and Z directions. Declaration public static void ScaleByXYZ(this Transform transform, float x, float y, float z) Parameters Type Name Description Transform transform Single x Single y Single z | Improve this Doc View Source ScaleByXZ(Transform, Single) Scale this transform in the X and Z directions. Declaration public static void ScaleByXZ(this Transform transform, float r) Parameters Type Name Description Transform transform Single r | Improve this Doc View Source ScaleByXZ(Transform, Single, Single) Scale this transform in the X, Z directions. Declaration public static void ScaleByXZ(this Transform transform, float x, float z) Parameters Type Name Description Transform transform Single x Single z | Improve this Doc View Source ScaleByY(Transform, Single) Scale this transform in the Y direction. Declaration public static void ScaleByY(this Transform transform, float y) Parameters Type Name Description Transform transform Single y | Improve this Doc View Source ScaleByYZ(Transform, Single) Scale this transform in the Y and Z directions. Declaration public static void ScaleByYZ(this Transform transform, float r) Parameters Type Name Description Transform transform Single r | Improve this Doc View Source ScaleByYZ(Transform, Single, Single) Scale this transform in the Y and Z directions. Declaration public static void ScaleByYZ(this Transform transform, float y, float z) Parameters Type Name Description Transform transform Single y Single z | Improve this Doc View Source ScaleByZ(Transform, Single) Scale this transform in the Z direction. Declaration public static void ScaleByZ(this Transform transform, float z) Parameters Type Name Description Transform transform Single z | Improve this Doc View Source SetLocalRotationX(Transform, Single) Sets the local X rotation. Declaration public static void SetLocalRotationX(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source SetLocalRotationY(Transform, Single) Sets the local Y rotation. Declaration public static void SetLocalRotationY(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source SetLocalRotationZ(Transform, Single) Sets the local Z rotation. Declaration public static void SetLocalRotationZ(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source SetLocalX(Transform, Single) Sets the local X position of this transform. Declaration public static void SetLocalX(this Transform transform, float x) Parameters Type Name Description Transform transform Single x | Improve this Doc View Source SetLocalXY(Transform, Single, Single) Sets the local X and Y position of this transform. Declaration public static void SetLocalXY(this Transform transform, float x, float y) Parameters Type Name Description Transform transform Single x Single y | Improve this Doc View Source SetLocalXYZ(Transform, Single, Single, Single) Sets the local X, Y and Z position of this transform. Declaration public static void SetLocalXYZ(this Transform transform, float x, float y, float z) Parameters Type Name Description Transform transform Single x Single y Single z | Improve this Doc View Source SetLocalXZ(Transform, Single, Single) Sets the local X and Z position of this transform. Declaration public static void SetLocalXZ(this Transform transform, float x, float z) Parameters Type Name Description Transform transform Single x Single z | Improve this Doc View Source SetLocalY(Transform, Single) Sets the local Y position of this transform. Declaration public static void SetLocalY(this Transform transform, float y) Parameters Type Name Description Transform transform Single y | Improve this Doc View Source SetLocalYZ(Transform, Single, Single) Sets the local Y and Z position of this transform. Declaration public static void SetLocalYZ(this Transform transform, float y, float z) Parameters Type Name Description Transform transform Single y Single z | Improve this Doc View Source SetLocalZ(Transform, Single) Sets the local Z position of this transform. Declaration public static void SetLocalZ(this Transform transform, float z) Parameters Type Name Description Transform transform Single z | Improve this Doc View Source SetRotationX(Transform, Single) Sets the X rotation. Declaration public static void SetRotationX(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source SetRotationY(Transform, Single) Sets the Y rotation. Declaration public static void SetRotationY(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source SetRotationZ(Transform, Single) Sets the Z rotation. Declaration public static void SetRotationZ(this Transform transform, float angle) Parameters Type Name Description Transform transform Single angle | Improve this Doc View Source SetScaleX(Transform, Single) Sets the local X scale of this transform. Declaration public static void SetScaleX(this Transform transform, float x) Parameters Type Name Description Transform transform Single x | Improve this Doc View Source SetScaleXY(Transform, Single, Single) Sets the local X and Y scale of this transform. Declaration public static void SetScaleXY(this Transform transform, float x, float y) Parameters Type Name Description Transform transform Single x Single y | Improve this Doc View Source SetScaleXYZ(Transform, Single, Single, Single) Sets the local X, Y and Z scale of this transform. Declaration public static void SetScaleXYZ(this Transform transform, float x, float y, float z) Parameters Type Name Description Transform transform Single x Single y Single z | Improve this Doc View Source SetScaleXZ(Transform, Single, Single) Sets the local X and Z scale of this transform. Declaration public static void SetScaleXZ(this Transform transform, float x, float z) Parameters Type Name Description Transform transform Single x Single z | Improve this Doc View Source SetScaleY(Transform, Single) Sets the local Y scale of this transform. Declaration public static void SetScaleY(this Transform transform, float y) Parameters Type Name Description Transform transform Single y | Improve this Doc View Source SetScaleYZ(Transform, Single, Single) Sets the local Y and Z scale of this transform. Declaration public static void SetScaleYZ(this Transform transform, float y, float z) Parameters Type Name Description Transform transform Single y Single z | Improve this Doc View Source SetScaleZ(Transform, Single) Sets the local Z scale of this transform. Declaration public static void SetScaleZ(this Transform transform, float z) Parameters Type Name Description Transform transform Single z | Improve this Doc View Source SetX(Transform, Single) Sets the X position of this transform. Declaration public static void SetX(this Transform transform, float x) Parameters Type Name Description Transform transform Single x | Improve this Doc View Source SetXY(Transform, Single, Single) Sets the X and Y position of this transform. Declaration public static void SetXY(this Transform transform, float x, float y) Parameters Type Name Description Transform transform Single x Single y | Improve this Doc View Source SetXYZ(Transform, Single, Single, Single) Sets the X, Y and Z position of this transform. Declaration public static void SetXYZ(this Transform transform, float x, float y, float z) Parameters Type Name Description Transform transform Single x Single y Single z | Improve this Doc View Source SetXZ(Transform, Single, Single) Sets the X and Z position of this transform. Declaration public static void SetXZ(this Transform transform, float x, float z) Parameters Type Name Description Transform transform Single x Single z | Improve this Doc View Source SetY(Transform, Single) Sets the Y position of this transform. Declaration public static void SetY(this Transform transform, float y) Parameters Type Name Description Transform transform Single y | Improve this Doc View Source SetYZ(Transform, Single, Single) Sets the Y and Z position of this transform. Declaration public static void SetYZ(this Transform transform, float y, float z) Parameters Type Name Description Transform transform Single y Single z | Improve this Doc View Source SetZ(Transform, Single) Sets the Z position of this transform. Declaration public static void SetZ(this Transform transform, float z) Parameters Type Name Description Transform transform Single z | Improve this Doc View Source TranslateX(Transform, Single) Translates this transform along the X axis. Declaration public static void TranslateX(this Transform transform, float x) Parameters Type Name Description Transform transform Single x | Improve this Doc View Source TranslateXY(Transform, Single, Single) Translates this transform along the X and Y axes. Declaration public static void TranslateXY(this Transform transform, float x, float y) Parameters Type Name Description Transform transform Single x Single y | Improve this Doc View Source TranslateXYZ(Transform, Single, Single, Single) Translates this transform along the X, Y and Z axis. Declaration public static void TranslateXYZ(this Transform transform, float x, float y, float z) Parameters Type Name Description Transform transform Single x Single y Single z | Improve this Doc View Source TranslateXZ(Transform, Single, Single) Translates this transform along the X and Z axes. Declaration public static void TranslateXZ(this Transform transform, float x, float z) Parameters Type Name Description Transform transform Single x Single z | Improve this Doc View Source TranslateY(Transform, Single) Translates this transform along the Y axis. Declaration public static void TranslateY(this Transform transform, float y) Parameters Type Name Description Transform transform Single y | Improve this Doc View Source TranslateYZ(Transform, Single, Single) Translates this transform along the Y and Z axes. Declaration public static void TranslateYZ(this Transform transform, float y, float z) Parameters Type Name Description Transform transform Single y Single z | Improve this Doc View Source TranslateZ(Transform, Single) Translates this transform along the Z axis. Declaration public static void TranslateZ(this Transform transform, float z) Parameters Type Name Description Transform transform Single z"
  },
  "api/Sophia.Extensions.VectorExtensions.html": {
    "href": "api/Sophia.Extensions.VectorExtensions.html",
    "title": "Class VectorExtensions | Sophia",
    "keywords": "Class VectorExtensions Contains useful extension methods for vectors. Inheritance Object VectorExtensions Namespace : Sophia.Extensions Assembly : Sophia.Platform.dll Syntax public static class VectorExtensions : object Methods | Improve this Doc View Source Dot(Vector2, Vector2) Equivalent to Vector2.Dot(v1, v2). Declaration public static float Dot(this Vector2 vector1, Vector2 vector2) Parameters Type Name Description Vector2 vector1 The first operand. Vector2 vector2 The second operand. Returns Type Description Single Vector2. | Improve this Doc View Source Dot(Vector3, Vector3) Equivalent to Vector3.Dot(v1, v2). Declaration public static float Dot(this Vector3 vector1, Vector3 vector2) Parameters Type Name Description Vector3 vector1 The first operand. Vector3 vector2 The second operand. Returns Type Description Single Vector3. | Improve this Doc View Source Dot(Vector4, Vector4) Equivalent to Vector4.Dot(v1, v2). Declaration public static float Dot(this Vector4 vector1, Vector4 vector2) Parameters Type Name Description Vector4 vector1 The first operand. Vector4 vector2 The second operand. Returns Type Description Single Vector4. | Improve this Doc View Source Perp(Vector2) Returns the vector rotated 90 degrees counter-clockwise. Declaration public static Vector2 Perp(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 Remarks The returned vector is always perpendicular to the given vector. The perp dot product can be calculated using this: var perpDotPorpduct = Vector2.Dot(v1.Perp(), v2); | Improve this Doc View Source Project(Vector2, Vector2) Returns the projection of this vector onto the given base. Declaration public static Vector2 Project(this Vector2 vector, Vector2 baseVector) Parameters Type Name Description Vector2 vector Vector2 baseVector Returns Type Description Vector2 | Improve this Doc View Source Project(Vector3, Vector3) Returns the projection of this vector onto the given base. Declaration public static Vector3 Project(this Vector3 vector, Vector3 baseVector) Parameters Type Name Description Vector3 vector Vector3 baseVector Returns Type Description Vector3 | Improve this Doc View Source Project(Vector4, Vector4) Returns the projection of this vector onto the given base. Declaration public static Vector4 Project(this Vector4 vector, Vector4 baseVector) Parameters Type Name Description Vector4 vector Vector4 baseVector Returns Type Description Vector4 | Improve this Doc View Source To2DXY(Vector3) Converts a 3D vector to a 2D vector taking the x and y coordinates. Declaration public static Vector2 To2DXY(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector2 | Improve this Doc View Source To2DXZ(Vector3) Converts a 3D vector to a 2D vector taking the x and z coordinates. Declaration public static Vector2 To2DXZ(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector2 | Improve this Doc View Source To2DYZ(Vector3) Converts a 3D vector to a 2D vector taking the y and z coordinates. Declaration public static Vector2 To2DYZ(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector2 | Improve this Doc View Source To3DXY(Vector2) Converts a 2D vector to a 3D vector using the vector for the x and y coordinates, and 0 for the z coordinate. Declaration public static Vector3 To3DXY(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector3 | Improve this Doc View Source To3DXY(Vector2, Single) Converts a 2D vector to a 3D vector using the vector for the x and y coordinates, and the given value for the z coordinate. Declaration public static Vector3 To3DXY(this Vector2 vector, float z) Parameters Type Name Description Vector2 vector Single z Returns Type Description Vector3 | Improve this Doc View Source To3DXZ(Vector2) Converts a 2D vector to a 3D vector using the vector for the x and z coordinates, and 0 for the y coordinate. Declaration public static Vector3 To3DXZ(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector3 | Improve this Doc View Source To3DXZ(Vector2, Single) Converts a 2D vector to a 3D vector using the vector for the x and z coordinates, and the given value for the y coordinate. Declaration public static Vector3 To3DXZ(this Vector2 vector, float y) Parameters Type Name Description Vector2 vector Single y Returns Type Description Vector3 | Improve this Doc View Source To3DYZ(Vector2) Converts a 2D vector to a 3D vector using the vector for the y and z coordinates, and 0 for the x coordinate. Declaration public static Vector3 To3DYZ(this Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector3 | Improve this Doc View Source To3DYZ(Vector2, Single) Converts a 2D vector to a 3D vector using the vector for the y and z coordinates, and the given value for the x coordinate. Declaration public static Vector3 To3DYZ(this Vector2 vector, float x) Parameters Type Name Description Vector2 vector Single x Returns Type Description Vector3 | Improve this Doc View Source WithIncX(Vector2, Single) Returns a copy of the vector with the x-coordinate incremented with the given value. Declaration public static Vector2 WithIncX(this Vector2 vector, float xInc) Parameters Type Name Description Vector2 vector Single xInc Returns Type Description Vector2 | Improve this Doc View Source WithIncX(Vector3, Single) Returns a copy of the vector with the x-coordinate incremented with the given value. Declaration public static Vector3 WithIncX(this Vector3 vector, float xInc) Parameters Type Name Description Vector3 vector Single xInc Returns Type Description Vector3 | Improve this Doc View Source WithIncY(Vector2, Single) Returns a copy of the vector with the y-coordinate incremented with the given value. Declaration public static Vector2 WithIncY(this Vector2 vector, float yInc) Parameters Type Name Description Vector2 vector Single yInc Returns Type Description Vector2 | Improve this Doc View Source WithIncY(Vector3, Single) Returns a copy of the vector with the y-coordinate incremented with the given value. Declaration public static Vector3 WithIncY(this Vector3 vector, float yInc) Parameters Type Name Description Vector3 vector Single yInc Returns Type Description Vector3 | Improve this Doc View Source WithIncZ(Vector3, Single) Returns a copy of the vector with the z-coordinate incremented with the given value. Declaration public static Vector3 WithIncZ(this Vector3 vector, float zInc) Parameters Type Name Description Vector3 vector Single zInc Returns Type Description Vector3 | Improve this Doc View Source WithX(Vector2, Single) Returns a copy of this vector with the given x-coordinate. Declaration public static Vector2 WithX(this Vector2 vector, float x) Parameters Type Name Description Vector2 vector Single x Returns Type Description Vector2 | Improve this Doc View Source WithX(Vector3, Single) Returns a copy of this vector with the given x-coordinate. Declaration public static Vector3 WithX(this Vector3 vector, float x) Parameters Type Name Description Vector3 vector Single x Returns Type Description Vector3 | Improve this Doc View Source WithY(Vector2, Single) Returns a copy of this vector with the given y-coordinate. Declaration public static Vector2 WithY(this Vector2 vector, float y) Parameters Type Name Description Vector2 vector Single y Returns Type Description Vector2 | Improve this Doc View Source WithY(Vector3, Single) Returns a copy of this vector with the given y-coordinate. Declaration public static Vector3 WithY(this Vector3 vector, float y) Parameters Type Name Description Vector3 vector Single y Returns Type Description Vector3 | Improve this Doc View Source WithZ(Vector3, Single) Returns a copy of this vector with the given z-coordinate. Declaration public static Vector3 WithZ(this Vector3 vector, float z) Parameters Type Name Description Vector3 vector Single z Returns Type Description Vector3"
  },
  "api/Sophia.Finished.html": {
    "href": "api/Sophia.Finished.html",
    "title": "Delegate Finished | Sophia",
    "keywords": "Delegate Finished Namespace : Sophia Assembly : Sophia.Core.dll Syntax public delegate void Finished(Guid timerID); Parameters Type Name Description Guid timerID Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.FloatList.html": {
    "href": "api/Sophia.FloatList.html",
    "title": "Class FloatList | Sophia",
    "keywords": "Class FloatList An InspectorList of type float . Inheritance Object InspectorList InspectorList < Single > FloatList Implements IList < Single > Inherited Members InspectorList<Single>.Count InspectorList<Single>.IsReadOnly InspectorList<Single>.Item[Int32] InspectorList<Single>.GetEnumerator() InspectorList<Single>.Add(Single) InspectorList<Single>.Clear() InspectorList<Single>.Contains(Single) InspectorList<Single>.CopyTo(Single[], Int32) InspectorList<Single>.Remove(Single) InspectorList<Single>.IndexOf(Single) InspectorList<Single>.Insert(Int32, Single) InspectorList<Single>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class FloatList : InspectorList<float>, IList<float> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.HighlightAttribute.html": {
    "href": "api/Sophia.HighlightAttribute.html",
    "title": "Class HighlightAttribute | Sophia",
    "keywords": "Class HighlightAttribute Mark simple types to be highligted in the inspector. Inheritance Object PropertyAttribute HighlightAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class HighlightAttribute : PropertyAttribute Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also PropertyAttribute"
  },
  "api/Sophia.html": {
    "href": "api/Sophia.html",
    "title": "Namespace Sophia | Sophia",
    "keywords": "Namespace Sophia Classes Algorithms BaseMonoBehaviour Provides some additional functions for MonoBehaviour. ColorList An InspectorList of type Color . CommentAttribute Used to mark a field to add a comment above the field in the inspector. CountDownTimer DummyAttribute Used to mark the last field in a MonoBehaviour This is useful to add a decorator that should be displayed below all fields. FloatList An InspectorList of type float . HighlightAttribute Mark simple types to be highligted in the inspector. InputAxisCommand InputController InputKeyCommand InspectorButtonAttribute Make an inspector button InspectorFlagsAttribute Mark fields that should be displayed as bit field mask in the inspector InspectorList The base class for the generic InspectorList. This class exists so that a single property drawer can be use for all sub classes. InspectorList<T> Exactly the same as generic List , but has a custom property drawer that draws a re-orderable list in the inspector. IntList An InspectorList of type int . InventoryController An inventory system LabelFieldAttribute Specifies a field to use as label for an item in the inspector. This is especially useful for arrays of compound types. MinMaxFloat Class for representing a bounded range. MinMaxInt Class for representing a bounded range. MonoBehaviourList An InspectorList of type MonoBehaviour . MonoBehaviourSingleton<T> NonNegativeAttribute Mark numeric values that should always be non-negative. ObjectList An InspectorList of type Object . Optional The base class of the generic Optional class. Optional<T> Useful for displaying optional values in the inspector. OptionalFloat Represents an optional float value. OptionalGameObject Represents an optional GameObject. OptionalInt Represents an optional int value. OptionalMonoBehaviour Represents an optional MonoBehaviour. OptionalString Represents an optional string value. OptionalVector2 Represents an optional Vector2 value. OptionalVector3 Represents an optional Vector3 value. PhysxMonoBehaviour Random Some convenience functions for random booleans and integers. ReadOnlyAttribute Used to mark inspectable fields as read-only (that is, making them uneditable, even if they are visible). ScreenshotTaker A component that makes it easy to take screenshots, usually for development purposes. StringList An InspectorList of type string . TimerManager Vector2List An InspectorList of type Vector2 . Vector3List An InspectorList of type Vector3 . Vector4List An InspectorList of type Vector4 . WarningIfNullAttribute Mark fields in a MonoBehaviour with this attribute to give a specific warning when the field is not set. Structs TimerCreationInfo TimerEventInfo Interfaces IDesktopInputManager IInputCommand IInputManager IInventoryItem An interface for an inventory item IRandom Represents a random generator. ITimer Enums KeyCode KeyState MultiFunctionalCommand TimerFinishedBehaviour Delegates Finished InventoryController.Added A delegate created to fire when an item was added InventoryController.Removed A delegate created to fire when an item was removed Started Stopped Updated"
  },
  "api/Sophia.IDesktopInputManager.html": {
    "href": "api/Sophia.IDesktopInputManager.html",
    "title": "Interface IDesktopInputManager | Sophia",
    "keywords": "Interface IDesktopInputManager Namespace : Sophia Assembly : Sophia.Core.dll Syntax public interface IDesktopInputManager Methods | Improve this Doc View Source isDown(KeyCode) Declaration bool isDown(KeyCode code) Parameters Type Name Description KeyCode code Returns Type Description Boolean | Improve this Doc View Source isPressed(KeyCode) Declaration bool isPressed(KeyCode code) Parameters Type Name Description KeyCode code Returns Type Description Boolean | Improve this Doc View Source isReleased(KeyCode) Declaration bool isReleased(KeyCode code) Parameters Type Name Description KeyCode code Returns Type Description Boolean | Improve this Doc View Source isUp(KeyCode) Declaration bool isUp(KeyCode code) Parameters Type Name Description KeyCode code Returns Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IInputCommand.html": {
    "href": "api/Sophia.IInputCommand.html",
    "title": "Interface IInputCommand | Sophia",
    "keywords": "Interface IInputCommand Inherited Members ICommand.execute(ICommandReceiver) Namespace : Sophia Assembly : Sophia.Core.dll Syntax public interface IInputCommand : ICommand Properties | Improve this Doc View Source InputManager Declaration IInputManager InputManager { get; } Property Value Type Description IInputManager | Improve this Doc View Source IsMultifuntional Declaration bool IsMultifuntional { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source isTriggered() Declaration bool isTriggered() Returns Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IInputManager.html": {
    "href": "api/Sophia.IInputManager.html",
    "title": "Interface IInputManager | Sophia",
    "keywords": "Interface IInputManager Namespace : Sophia Assembly : Sophia.Core.dll Syntax public interface IInputManager Methods | Improve this Doc View Source getAxis(String) Declaration float getAxis(string axis) Parameters Type Name Description String axis Returns Type Description Single Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IInventoryItem.html": {
    "href": "api/Sophia.IInventoryItem.html",
    "title": "Interface IInventoryItem | Sophia",
    "keywords": "Interface IInventoryItem An interface for an inventory item Namespace : Sophia Assembly : Sophia.Core.dll Syntax public interface IInventoryItem Properties | Improve this Doc View Source ID Declaration Guid ID { get; } Property Value Type Description Guid Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InputAxisCommand.html": {
    "href": "api/Sophia.InputAxisCommand.html",
    "title": "Class InputAxisCommand | Sophia",
    "keywords": "Class InputAxisCommand Inheritance Object InputAxisCommand Implements IInputCommand ICommand Namespace : Sophia Assembly : Sophia.Core.dll Syntax public abstract class InputAxisCommand : object, IInputCommand, ICommand Constructors | Improve this Doc View Source InputAxisCommand(String, IInputManager, MultiFunctionalCommand) Constructor of the input command Declaration public InputAxisCommand(string axis, IInputManager manager, MultiFunctionalCommand multi) Parameters Type Name Description String axis axis of the input command IInputManager manager input manager to use MultiFunctionalCommand multi Properties | Improve this Doc View Source AxisName Declaration public string AxisName { get; } Property Value Type Description String | Improve this Doc View Source AxisValue Declaration public float AxisValue { get; } Property Value Type Description Single | Improve this Doc View Source InputManager Declaration public IInputManager InputManager { get; } Property Value Type Description IInputManager | Improve this Doc View Source IsMultifuntional Declaration public bool IsMultifuntional { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source execute(ICommandReceiver) Execute the input command Declaration public abstract bool execute(ICommandReceiver receiver) Parameters Type Name Description ICommandReceiver receiver The receiver of the input command Returns Type Description Boolean True if we handled the command, false if not | Improve this Doc View Source isTriggered() Is the input command triggered Declaration public bool isTriggered() Returns Type Description Boolean True if the command is triggered, false if not Implements IInputCommand ICommand Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InputController.html": {
    "href": "api/Sophia.InputController.html",
    "title": "Class InputController | Sophia",
    "keywords": "Class InputController Inheritance Object InputController Namespace : Sophia Assembly : Sophia.Core.dll Syntax public abstract class InputController : object Methods | Improve this Doc View Source addCommand(String, IInputCommand) Declaration protected void addCommand(string listName, IInputCommand command) Parameters Type Name Description String listName IInputCommand command | Improve this Doc View Source initialize() Declaration public abstract void initialize() | Improve this Doc View Source processInputFor(ICommandReceiver) Declaration public void processInputFor(ICommandReceiver receiver) Parameters Type Name Description ICommandReceiver receiver | Improve this Doc View Source shutdown() Declaration public void shutdown() Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InputKeyCommand.html": {
    "href": "api/Sophia.InputKeyCommand.html",
    "title": "Class InputKeyCommand | Sophia",
    "keywords": "Class InputKeyCommand Inheritance Object InputKeyCommand Implements IInputCommand ICommand Namespace : Sophia Assembly : Sophia.Core.dll Syntax public abstract class InputKeyCommand : object, IInputCommand, ICommand Constructors | Improve this Doc View Source InputKeyCommand(KeyCode, KeyState, IInputManager, MultiFunctionalCommand) Constructor of the input command Declaration public InputKeyCommand(KeyCode code, KeyState state, IInputManager manager, MultiFunctionalCommand multi) Parameters Type Name Description KeyCode code Key we need to check KeyState state State of the key we need to check IInputManager manager Inputmanager to use MultiFunctionalCommand multi Properties | Improve this Doc View Source InputManager Declaration public IInputManager InputManager { get; } Property Value Type Description IInputManager | Improve this Doc View Source IsMultifuntional Declaration public bool IsMultifuntional { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source execute(ICommandReceiver) Execute the input command Declaration public abstract bool execute(ICommandReceiver receiver) Parameters Type Name Description ICommandReceiver receiver The receiver of the input command Returns Type Description Boolean | Improve this Doc View Source isTriggered() Is the input command triggered Declaration public bool isTriggered() Returns Type Description Boolean True if the command is triggered, false if not Implements IInputCommand ICommand Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InspectorButtonAttribute.html": {
    "href": "api/Sophia.InspectorButtonAttribute.html",
    "title": "Class InspectorButtonAttribute | Sophia",
    "keywords": "Class InspectorButtonAttribute Make an inspector button Inheritance Object InspectorButtonAttribute Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class InspectorButtonAttribute : Attribute Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InspectorFlagsAttribute.html": {
    "href": "api/Sophia.InspectorFlagsAttribute.html",
    "title": "Class InspectorFlagsAttribute | Sophia",
    "keywords": "Class InspectorFlagsAttribute Mark fields that should be displayed as bit field mask in the inspector Inheritance Object PropertyAttribute InspectorFlagsAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class InspectorFlagsAttribute : PropertyAttribute Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InspectorList.html": {
    "href": "api/Sophia.InspectorList.html",
    "title": "Class InspectorList | Sophia",
    "keywords": "Class InspectorList The base class for the generic InspectorList. This class exists so that a single property drawer can be use for all sub classes. Inheritance Object InspectorList InspectorList<T> Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class InspectorList : object Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InspectorList-1.html": {
    "href": "api/Sophia.InspectorList-1.html",
    "title": "Class InspectorList<T> | Sophia",
    "keywords": "Class InspectorList<T> Exactly the same as generic List , but has a custom property drawer that draws a re-orderable list in the inspector. Inheritance Object InspectorList InspectorList<T> ColorList FloatList IntList MonoBehaviourList ObjectList StringList Vector2List Vector3List Vector4List Implements IList <T> Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class InspectorList<T> : InspectorList, IList<T> Type Parameters Name Description T The type of the contents of this list. Remarks This class should not be used directly (otherwise, it will not appear in the inspector). Instead, use either one of the provided sub classes, or a define a new custom non-generic subclass and use that. Constructors | Improve this Doc View Source InspectorList() Declaration public InspectorList() | Improve this Doc View Source InspectorList(IEnumerable<T>) Declaration public InspectorList(IEnumerable<T> initialValues) Parameters Type Name Description IEnumerable <T> initialValues Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Methods | Improve this Doc View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, T) Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index T item | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IntList.html": {
    "href": "api/Sophia.IntList.html",
    "title": "Class IntList | Sophia",
    "keywords": "Class IntList An InspectorList of type int . Inheritance Object InspectorList InspectorList < Int32 > IntList Implements IList < Int32 > Inherited Members InspectorList<Int32>.Count InspectorList<Int32>.IsReadOnly InspectorList<Int32>.Item[Int32] InspectorList<Int32>.GetEnumerator() InspectorList<Int32>.Add(Int32) InspectorList<Int32>.Clear() InspectorList<Int32>.Contains(Int32) InspectorList<Int32>.CopyTo(Int32[], Int32) InspectorList<Int32>.Remove(Int32) InspectorList<Int32>.IndexOf(Int32) InspectorList<Int32>.Insert(Int32, Int32) InspectorList<Int32>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class IntList : InspectorList<int>, IList<int> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InventoryController.Added.html": {
    "href": "api/Sophia.InventoryController.Added.html",
    "title": "Delegate InventoryController.Added | Sophia",
    "keywords": "Delegate InventoryController.Added A delegate created to fire when an item was added Namespace : Sophia Assembly : Sophia.Core.dll Syntax public delegate void Added(IInventoryItem item); Parameters Type Name Description IInventoryItem item The added item Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InventoryController.html": {
    "href": "api/Sophia.InventoryController.html",
    "title": "Class InventoryController | Sophia",
    "keywords": "Class InventoryController An inventory system Inheritance Object InventoryController Namespace : Sophia Assembly : Sophia.Core.dll Syntax public class InventoryController : object Constructors | Improve this Doc View Source InventoryController(IInventoryItem[]) Constructor for the inventory controller Declaration public InventoryController(IInventoryItem[] initialItems = null) Parameters Type Name Description IInventoryItem [] initialItems Fields | Improve this Doc View Source OnItemAdded Declaration public InventoryController.Added OnItemAdded Field Value Type Description InventoryController.Added | Improve this Doc View Source OnItemRemoved Declaration public InventoryController.Removed OnItemRemoved Field Value Type Description InventoryController.Removed Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source add(IInventoryItem) Add a new item to the inventory Declaration public bool add(IInventoryItem item) Parameters Type Name Description IInventoryItem item The item to be added Returns Type Description Boolean Returns true when it was added, false if not | Improve this Doc View Source clear() Remove all items from the inventory Declaration public void clear() | Improve this Doc View Source get(Guid) Retrieve an item from the inventory Declaration public IInventoryItem get(Guid identifier) Parameters Type Name Description Guid identifier Identifier of the item to be retrieved Returns Type Description IInventoryItem The requested item when found, null otherwise | Improve this Doc View Source getAs<T>(Guid) Retrieve an item from the inventory Declaration public T getAs<T>(Guid identifier) where T : class, IInventoryItem Parameters Type Name Description Guid identifier Identifier of the item to be retrieved Returns Type Description T The requested item, null otherwise Type Parameters Name Description T Type of the item to be retrieved | Improve this Doc View Source getItemsOfType<T>() Retrieve items of a certain type Declaration public List<IInventoryItem> getItemsOfType<T>() where T : class, IInventoryItem Returns Type Description List < IInventoryItem > A list of all items of the specific type Type Parameters Name Description T The type of the items to be retrieved | Improve this Doc View Source remove(Guid) Remove an item from the inventory Declaration public bool remove(Guid identifier) Parameters Type Name Description Guid identifier Identifier of the item to be removed Returns Type Description Boolean Return true when removed, false when not removed | Improve this Doc View Source remove(IInventoryItem) Remove an item from the inventory Declaration public bool remove(IInventoryItem item) Parameters Type Name Description IInventoryItem item Item to be removed Returns Type Description Boolean Returns true when removed, false when not removed Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.InventoryController.Removed.html": {
    "href": "api/Sophia.InventoryController.Removed.html",
    "title": "Delegate InventoryController.Removed | Sophia",
    "keywords": "Delegate InventoryController.Removed A delegate created to fire when an item was removed Namespace : Sophia Assembly : Sophia.Core.dll Syntax public delegate void Removed(IInventoryItem item); Parameters Type Name Description IInventoryItem item The removed item Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IO.EventFilters.html": {
    "href": "api/Sophia.IO.EventFilters.html",
    "title": "Enum EventFilters | Sophia",
    "keywords": "Enum EventFilters Namespace : Sophia.IO Assembly : Sophia.Core.dll Syntax public enum EventFilters : int Fields Name Description CHANGED CREATED DELETED ERROR RENAMED"
  },
  "api/Sophia.IO.FileSystemWatcher.ErrorEventHandler.html": {
    "href": "api/Sophia.IO.FileSystemWatcher.ErrorEventHandler.html",
    "title": "Delegate FileSystemWatcher.ErrorEventHandler | Sophia",
    "keywords": "Delegate FileSystemWatcher.ErrorEventHandler Namespace : Sophia.IO Assembly : Sophia.Core.dll Syntax public delegate void ErrorEventHandler(System.IO.FileSystemWatcher sender, ErrorEventArgs e); Parameters Type Name Description System.IO.FileSystemWatcher sender ErrorEventArgs e Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IO.FileSystemWatcher.FileSystemEventHandler.html": {
    "href": "api/Sophia.IO.FileSystemWatcher.FileSystemEventHandler.html",
    "title": "Delegate FileSystemWatcher.FileSystemEventHandler | Sophia",
    "keywords": "Delegate FileSystemWatcher.FileSystemEventHandler Namespace : Sophia.IO Assembly : Sophia.Core.dll Syntax public delegate void FileSystemEventHandler(System.IO.FileSystemWatcher sender, FileSystemEventArgs e); Parameters Type Name Description System.IO.FileSystemWatcher sender FileSystemEventArgs e Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IO.FileSystemWatcher.html": {
    "href": "api/Sophia.IO.FileSystemWatcher.html",
    "title": "Class FileSystemWatcher | Sophia",
    "keywords": "Class FileSystemWatcher Inheritance Object FileSystemWatcher Namespace : Sophia.IO Assembly : Sophia.Core.dll Syntax public class FileSystemWatcher : object Constructors | Improve this Doc View Source FileSystemWatcher(Logger) Declaration public FileSystemWatcher(Logger logger = null) Parameters Type Name Description Logger logger Fields | Improve this Doc View Source DEFAULT_CREATION_INFO Declaration public static FileWatcherCreationInfo DEFAULT_CREATION_INFO Field Value Type Description FileWatcherCreationInfo | Improve this Doc View Source onErrorOccured Declaration public FileSystemWatcher.ErrorEventHandler onErrorOccured Field Value Type Description FileSystemWatcher.ErrorEventHandler | Improve this Doc View Source onFileChanged Declaration public FileSystemWatcher.FileSystemEventHandler onFileChanged Field Value Type Description FileSystemWatcher.FileSystemEventHandler | Improve this Doc View Source onFileCreated Declaration public FileSystemWatcher.FileSystemEventHandler onFileCreated Field Value Type Description FileSystemWatcher.FileSystemEventHandler | Improve this Doc View Source onFileDeleted Declaration public FileSystemWatcher.FileSystemEventHandler onFileDeleted Field Value Type Description FileSystemWatcher.FileSystemEventHandler | Improve this Doc View Source onFileRenamed Declaration public FileSystemWatcher.RenamedEventHandler onFileRenamed Field Value Type Description FileSystemWatcher.RenamedEventHandler Methods | Improve this Doc View Source disableWatcher(String) Disable a specific file watcher Declaration public bool disableWatcher(string path) Parameters Type Name Description String path Path towards the file watcher we would like to disable Returns Type Description Boolean returns true if disabled, false otherwise. | Improve this Doc View Source enableWatcher(String) Enable a specific file watcher Declaration public bool enableWatcher(string path) Parameters Type Name Description String path Path towards the file watcher we would like to enable Returns Type Description Boolean returns true if enabled, false otherwise. | Improve this Doc View Source subscribe(String, FileWatcherCreationInfo) a new file system change notifier that will raise events when a directory, or file in a directory, changes. Declaration public bool subscribe(string path, FileWatcherCreationInfo info) Parameters Type Name Description String path path to the directory we would like to observe. FileWatcherCreationInfo info Some additional properties for the filewatcher we would like to create. Returns Type Description Boolean Will return true if we succeeded, false otherwise. Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IO.FileSystemWatcher.RenamedEventHandler.html": {
    "href": "api/Sophia.IO.FileSystemWatcher.RenamedEventHandler.html",
    "title": "Delegate FileSystemWatcher.RenamedEventHandler | Sophia",
    "keywords": "Delegate FileSystemWatcher.RenamedEventHandler Namespace : Sophia.IO Assembly : Sophia.Core.dll Syntax public delegate void RenamedEventHandler(System.IO.FileSystemWatcher sender, RenamedEventArgs e); Parameters Type Name Description System.IO.FileSystemWatcher sender RenamedEventArgs e Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IO.FileWatcherCreationInfo.html": {
    "href": "api/Sophia.IO.FileWatcherCreationInfo.html",
    "title": "Class FileWatcherCreationInfo | Sophia",
    "keywords": "Class FileWatcherCreationInfo Inheritance Object FileWatcherCreationInfo Namespace : Sophia.IO Assembly : Sophia.Core.dll Syntax public class FileWatcherCreationInfo : object Constructors | Improve this Doc View Source FileWatcherCreationInfo() Declaration public FileWatcherCreationInfo() Fields | Improve this Doc View Source event_filters Event filter we want to subscribe on Declaration public EventFilters event_filters Field Value Type Description EventFilters | Improve this Doc View Source notification_filters Notifications we want to subscribe on Declaration public NotifyFilters notification_filters Field Value Type Description NotifyFilters | Improve this Doc View Source watch_on_creation Should we start watching on creation. Declaration public bool watch_on_creation Field Value Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.IO.html": {
    "href": "api/Sophia.IO.html",
    "title": "Namespace Sophia.IO | Sophia",
    "keywords": "Namespace Sophia.IO Classes FileSystemWatcher FileWatcherCreationInfo Enums EventFilters Delegates FileSystemWatcher.ErrorEventHandler FileSystemWatcher.FileSystemEventHandler FileSystemWatcher.RenamedEventHandler"
  },
  "api/Sophia.IRandom.html": {
    "href": "api/Sophia.IRandom.html",
    "title": "Interface IRandom | Sophia",
    "keywords": "Interface IRandom Represents a random generator. Namespace : Sophia Assembly : Sophia.Core.dll Syntax public interface IRandom Methods | Improve this Doc View Source next() Gets the next the random integer value. Declaration int next() Returns Type Description Int32 | Improve this Doc View Source next(Int32) Gets the next the random integer value below the given maximum. Declaration int next(int maxValue) Parameters Type Name Description Int32 maxValue Returns Type Description Int32 | Improve this Doc View Source next(Int32, Int32) Gets the next the random integer value greater than or equal to the minimum and below the given maximum. Declaration int next(int minValue, int maxValue) Parameters Type Name Description Int32 minValue Int32 maxValue Returns Type Description Int32 | Improve this Doc View Source nextBytes(Byte[]) Fills the given array with random bytes. Declaration void nextBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes | Improve this Doc View Source nextDouble() Gets the next the random double value. Declaration double nextDouble() Returns Type Description Double Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.ITimer.html": {
    "href": "api/Sophia.ITimer.html",
    "title": "Interface ITimer | Sophia",
    "keywords": "Interface ITimer Namespace : Sophia Assembly : Sophia.Core.dll Syntax public interface ITimer Properties | Improve this Doc View Source CurrentTime Declaration float CurrentTime { get; } Property Value Type Description Single | Improve this Doc View Source IsPaused Declaration bool IsPaused { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRunning Declaration bool IsRunning { get; } Property Value Type Description Boolean | Improve this Doc View Source onFinished Declaration Finished onFinished { get; set; } Property Value Type Description Finished | Improve this Doc View Source onStarted Declaration Started onStarted { get; set; } Property Value Type Description Started | Improve this Doc View Source onStopped Declaration Stopped onStopped { get; set; } Property Value Type Description Stopped | Improve this Doc View Source onUpdate Declaration Updated onUpdate { get; set; } Property Value Type Description Updated | Improve this Doc View Source StartTime Declaration float StartTime { get; } Property Value Type Description Single | Improve this Doc View Source TimerID Declaration Guid TimerID { get; } Property Value Type Description Guid Methods | Improve this Doc View Source addTime(Single) Declaration void addTime(float time) Parameters Type Name Description Single time | Improve this Doc View Source initialize(Single) Declaration void initialize(float time) Parameters Type Name Description Single time | Improve this Doc View Source reset() Declaration void reset() | Improve this Doc View Source reset(Single) Declaration void reset(float time) Parameters Type Name Description Single time | Improve this Doc View Source reset(Single, Boolean) Declaration void reset(float time, bool shouldStart) Parameters Type Name Description Single time Boolean shouldStart | Improve this Doc View Source start() Declaration void start() | Improve this Doc View Source stop() Declaration void stop() | Improve this Doc View Source togglePause() Declaration void togglePause() | Improve this Doc View Source update(Single) Declaration void update(float dTime) Parameters Type Name Description Single dTime Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.KeyCode.html": {
    "href": "api/Sophia.KeyCode.html",
    "title": "Enum KeyCode | Sophia",
    "keywords": "Enum KeyCode Namespace : Sophia Assembly : Sophia.Core.dll Syntax public enum KeyCode : int Fields Name Description A Alpha0 Alpha1 Alpha2 Alpha3 Alpha4 Alpha5 Alpha6 Alpha7 Alpha8 Alpha9 AltGr Ampersand Asterisk At B BackQuote Backslash Backspace Break C CapsLock Caret Clear Colon Comma D Delete Dollar DoubleQuote DownArrow E End Equals Escape Exclaim F F1 F10 F11 F12 F13 F14 F15 F2 F3 F4 F5 F6 F7 F8 F9 G Greater H Hash Help Home I Insert J Joystick1Button0 Joystick1Button1 Joystick1Button10 Joystick1Button11 Joystick1Button12 Joystick1Button13 Joystick1Button14 Joystick1Button15 Joystick1Button16 Joystick1Button17 Joystick1Button18 Joystick1Button19 Joystick1Button2 Joystick1Button3 Joystick1Button4 Joystick1Button5 Joystick1Button6 Joystick1Button7 Joystick1Button8 Joystick1Button9 Joystick2Button0 Joystick2Button1 Joystick2Button10 Joystick2Button11 Joystick2Button12 Joystick2Button13 Joystick2Button14 Joystick2Button15 Joystick2Button16 Joystick2Button17 Joystick2Button18 Joystick2Button19 Joystick2Button2 Joystick2Button3 Joystick2Button4 Joystick2Button5 Joystick2Button6 Joystick2Button7 Joystick2Button8 Joystick2Button9 Joystick3Button0 Joystick3Button1 Joystick3Button10 Joystick3Button11 Joystick3Button12 Joystick3Button13 Joystick3Button14 Joystick3Button15 Joystick3Button16 Joystick3Button17 Joystick3Button18 Joystick3Button19 Joystick3Button2 Joystick3Button3 Joystick3Button4 Joystick3Button5 Joystick3Button6 Joystick3Button7 Joystick3Button8 Joystick3Button9 Joystick4Button0 Joystick4Button1 Joystick4Button10 Joystick4Button11 Joystick4Button12 Joystick4Button13 Joystick4Button14 Joystick4Button15 Joystick4Button16 Joystick4Button17 Joystick4Button18 Joystick4Button19 Joystick4Button2 Joystick4Button3 Joystick4Button4 Joystick4Button5 Joystick4Button6 Joystick4Button7 Joystick4Button8 Joystick4Button9 Joystick5Button0 Joystick5Button1 Joystick5Button10 Joystick5Button11 Joystick5Button12 Joystick5Button13 Joystick5Button14 Joystick5Button15 Joystick5Button16 Joystick5Button17 Joystick5Button18 Joystick5Button19 Joystick5Button2 Joystick5Button3 Joystick5Button4 Joystick5Button5 Joystick5Button6 Joystick5Button7 Joystick5Button8 Joystick5Button9 Joystick6Button0 Joystick6Button1 Joystick6Button10 Joystick6Button11 Joystick6Button12 Joystick6Button13 Joystick6Button14 Joystick6Button15 Joystick6Button16 Joystick6Button17 Joystick6Button18 Joystick6Button19 Joystick6Button2 Joystick6Button3 Joystick6Button4 Joystick6Button5 Joystick6Button6 Joystick6Button7 Joystick6Button8 Joystick6Button9 Joystick7Button0 Joystick7Button1 Joystick7Button10 Joystick7Button11 Joystick7Button12 Joystick7Button13 Joystick7Button14 Joystick7Button15 Joystick7Button16 Joystick7Button17 Joystick7Button18 Joystick7Button19 Joystick7Button2 Joystick7Button3 Joystick7Button4 Joystick7Button5 Joystick7Button6 Joystick7Button7 Joystick7Button8 Joystick7Button9 Joystick8Button0 Joystick8Button1 Joystick8Button10 Joystick8Button11 Joystick8Button12 Joystick8Button13 Joystick8Button14 Joystick8Button15 Joystick8Button16 Joystick8Button17 Joystick8Button18 Joystick8Button19 Joystick8Button2 Joystick8Button3 Joystick8Button4 Joystick8Button5 Joystick8Button6 Joystick8Button7 Joystick8Button8 Joystick8Button9 JoystickButton0 JoystickButton1 JoystickButton10 JoystickButton11 JoystickButton12 JoystickButton13 JoystickButton14 JoystickButton15 JoystickButton16 JoystickButton17 JoystickButton18 JoystickButton19 JoystickButton2 JoystickButton3 JoystickButton4 JoystickButton5 JoystickButton6 JoystickButton7 JoystickButton8 JoystickButton9 K Keypad0 Keypad1 Keypad2 Keypad3 Keypad4 Keypad5 Keypad6 Keypad7 Keypad8 Keypad9 KeypadDivide KeypadEnter KeypadEquals KeypadMinus KeypadMultiply KeypadPeriod KeypadPlus L LeftAlt LeftApple LeftArrow LeftBracket LeftCommand LeftControl LeftCurlyBracket LeftParen LeftShift LeftWindows Less M Menu Minus Mouse0 Mouse1 Mouse2 Mouse3 Mouse4 Mouse5 Mouse6 N None Numlock O P PageDown PageUp Pause Percent Period Pipe Plus Print Q Question Quote R Return RightAlt RightApple RightArrow RightBracket RightCommand RightControl RightCurlyBracket RightParen RightShift RightWindows S ScrollLock Semicolon Slash Space SysReq T Tab Tilde U Underscore UpArrow V W X Y Z"
  },
  "api/Sophia.KeyState.html": {
    "href": "api/Sophia.KeyState.html",
    "title": "Enum KeyState | Sophia",
    "keywords": "Enum KeyState Namespace : Sophia Assembly : Sophia.Core.dll Syntax public enum KeyState : int Fields Name Description DOWN PRESSED RELEASED UP"
  },
  "api/Sophia.LabelFieldAttribute.html": {
    "href": "api/Sophia.LabelFieldAttribute.html",
    "title": "Class LabelFieldAttribute | Sophia",
    "keywords": "Class LabelFieldAttribute Specifies a field to use as label for an item in the inspector. This is especially useful for arrays of compound types. Inheritance Object PropertyAttribute LabelFieldAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class LabelFieldAttribute : PropertyAttribute Examples In this example, the \"type\" field of ArrayItem will be used as the item label for the array in the inspector. [Serializable] public enum EnumNames { Label1, Label2 } [Serializable] public class ArrayItem { public EnumNames type; public int value; } public class LabelFieldTest : MonoBehaviour { [LabelField(\"type\")] public ArrayItem[] items; } Constructors | Improve this Doc View Source LabelFieldAttribute(String) Declaration public LabelFieldAttribute(string labelField) Parameters Type Name Description String labelField Properties | Improve this Doc View Source LabelField Declaration public string LabelField { get; } Property Value Type Description String Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.MinMaxFloat.html": {
    "href": "api/Sophia.MinMaxFloat.html",
    "title": "Class MinMaxFloat | Sophia",
    "keywords": "Class MinMaxFloat Class for representing a bounded range. Inheritance Object MinMaxFloat Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class MinMaxFloat : object Constructors | Improve this Doc View Source MinMaxFloat() Declaration public MinMaxFloat() | Improve this Doc View Source MinMaxFloat(Single, Single) Declaration public MinMaxFloat(float min, float max) Parameters Type Name Description Single min Single max Properties | Improve this Doc View Source Max Declaration public float Max { get; set; } Property Value Type Description Single | Improve this Doc View Source Min Declaration public float Min { get; set; } Property Value Type Description Single Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.MinMaxInt.html": {
    "href": "api/Sophia.MinMaxInt.html",
    "title": "Class MinMaxInt | Sophia",
    "keywords": "Class MinMaxInt Class for representing a bounded range. Inheritance Object MinMaxInt Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class MinMaxInt : object Constructors | Improve this Doc View Source MinMaxInt() Declaration public MinMaxInt() | Improve this Doc View Source MinMaxInt(Int32, Int32) Declaration public MinMaxInt(int min, int max) Parameters Type Name Description Int32 min Int32 max Properties | Improve this Doc View Source Max Declaration public int Max { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Min Declaration public int Min { get; set; } Property Value Type Description Int32 Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.MonoBehaviourList.html": {
    "href": "api/Sophia.MonoBehaviourList.html",
    "title": "Class MonoBehaviourList | Sophia",
    "keywords": "Class MonoBehaviourList An InspectorList of type MonoBehaviour . Inheritance Object InspectorList InspectorList < MonoBehaviour > MonoBehaviourList Implements IList < MonoBehaviour > Inherited Members InspectorList<MonoBehaviour>.Count InspectorList<MonoBehaviour>.IsReadOnly InspectorList<MonoBehaviour>.Item[Int32] InspectorList<MonoBehaviour>.GetEnumerator() InspectorList<MonoBehaviour>.Add(MonoBehaviour) InspectorList<MonoBehaviour>.Clear() InspectorList<MonoBehaviour>.Contains(MonoBehaviour) InspectorList<MonoBehaviour>.CopyTo(MonoBehaviour[], Int32) InspectorList<MonoBehaviour>.Remove(MonoBehaviour) InspectorList<MonoBehaviour>.IndexOf(MonoBehaviour) InspectorList<MonoBehaviour>.Insert(Int32, MonoBehaviour) InspectorList<MonoBehaviour>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class MonoBehaviourList : InspectorList<MonoBehaviour>, IList<MonoBehaviour> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.MonoBehaviourSingleton-1.html": {
    "href": "api/Sophia.MonoBehaviourSingleton-1.html",
    "title": "Class MonoBehaviourSingleton<T> | Sophia",
    "keywords": "Class MonoBehaviourSingleton<T> Inheritance Object Object Component Behaviour MonoBehaviour BaseMonoBehaviour MonoBehaviourSingleton<T> ScreenshotTaker Inherited Members BaseMonoBehaviour.transform BaseMonoBehaviour.gameObject BaseMonoBehaviour.changeLayersRecursively(Transform, String) BaseMonoBehaviour.changeLayersRecursively(Transform, Int32) BaseMonoBehaviour.instantiate<T>(T, GameObject) BaseMonoBehaviour.instantiate<T>(T, GameObject, Vector3, Quaternion) BaseMonoBehaviour.instantiate(GameObject) BaseMonoBehaviour.instantiate(GameObject, Vector3, Quaternion) BaseMonoBehaviour.instantiate(GameObject, GameObject) BaseMonoBehaviour.findObjectsOfInterface<I>() BaseMonoBehaviour.Invoke(Action, Single) BaseMonoBehaviour.InvokeRepeating(Action, Single, Single) BaseMonoBehaviour.DestroyUniversal(Object) BaseMonoBehaviour.getRequiredComponent<T>() BaseMonoBehaviour.getRequiredComponentInChilderen<T>() BaseMonoBehaviour.getRequiredComponentsInChilderen<T>() BaseMonoBehaviour.getRequiredComponentInParent<T>() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.networkView UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.ToString() Object.name Object.hideFlags Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public abstract class MonoBehaviourSingleton<T> : BaseMonoBehaviour where T : Component Type Parameters Name Description T Properties | Improve this Doc View Source Instance Declaration public static T Instance { get; } Property Value Type Description T | Improve this Doc View Source ShouldDestroyOnLoad Declaration protected abstract bool ShouldDestroyOnLoad { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source getAs<U>() Declaration public static U getAs<U>() where U : BaseMonoBehaviour Returns Type Description U Type Parameters Name Description U | Improve this Doc View Source onAwake() onAwake is called when the script instance is being loaded. Declaration protected abstract void onAwake() | Improve this Doc View Source onDestroy() Destroying the attached Behaviour will result in the game or Scene receiving OnDestroy. Declaration protected abstract void onDestroy() | Improve this Doc View Source onStart() Start is called on the frame when a script is enabled just before any of the Update methods are called the first time. Declaration protected abstract void onStart() | Improve this Doc View Source onUpdate(Single) Update is called every frame, if the MonoBehaviour is enabled. Declaration protected abstract void onUpdate(float dTime) Parameters Type Name Description Single dTime The completion time in seconds since the last frame. Extension Methods MonoBehaviourExtensions.Clone<T>(T) MonoBehaviourExtensions.Clone<T>(T, Int32) MonoBehaviourExtensions.FindChild(Component, String) MonoBehaviourExtensions.FindChildRecursively(Component, String) MonoBehaviourExtensions.GetInterfaceComponent<TInterface>(Component) MonoBehaviourExtensions.Invoke(MonoBehaviour, Action, Single) MonoBehaviourExtensions.InvokeRepeating(MonoBehaviour, Action, Single, Single) ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.MultiFunctionalCommand.html": {
    "href": "api/Sophia.MultiFunctionalCommand.html",
    "title": "Enum MultiFunctionalCommand | Sophia",
    "keywords": "Enum MultiFunctionalCommand Namespace : Sophia Assembly : Sophia.Core.dll Syntax public enum MultiFunctionalCommand : int Fields Name Description NO YES"
  },
  "api/Sophia.NonNegativeAttribute.html": {
    "href": "api/Sophia.NonNegativeAttribute.html",
    "title": "Class NonNegativeAttribute | Sophia",
    "keywords": "Class NonNegativeAttribute Mark numeric values that should always be non-negative. Inheritance Object PropertyAttribute NonNegativeAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class NonNegativeAttribute : PropertyAttribute Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.ObjectList.html": {
    "href": "api/Sophia.ObjectList.html",
    "title": "Class ObjectList | Sophia",
    "keywords": "Class ObjectList An InspectorList of type Object . Inheritance Object InspectorList InspectorList < Object > ObjectList Implements IList < Object > Inherited Members InspectorList<Object>.Count InspectorList<Object>.IsReadOnly InspectorList<Object>.Item[Int32] InspectorList<Object>.GetEnumerator() InspectorList<Object>.Add(Object) InspectorList<Object>.Clear() InspectorList<Object>.Contains(Object) InspectorList<Object>.CopyTo(Object[], Int32) InspectorList<Object>.Remove(Object) InspectorList<Object>.IndexOf(Object) InspectorList<Object>.Insert(Int32, Object) InspectorList<Object>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class ObjectList : InspectorList<Object>, IList<Object> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Optional.html": {
    "href": "api/Sophia.Optional.html",
    "title": "Class Optional | Sophia",
    "keywords": "Class Optional The base class of the generic Optional class. Inheritance Object Optional Optional<T> Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class Optional : object Remarks This is an empty class; the reason it exists is so that a single property drawer can be used for all classes that derive from the generic Optional class. Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Optional-1.html": {
    "href": "api/Sophia.Optional-1.html",
    "title": "Class Optional<T> | Sophia",
    "keywords": "Class Optional<T> Useful for displaying optional values in the inspector. Inheritance Object Optional Optional<T> OptionalFloat OptionalGameObject OptionalInt OptionalMonoBehaviour OptionalString OptionalVector2 OptionalVector3 Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class Optional<T> : Optional Type Parameters Name Description T The type of the optional value. Remarks For this class to be displayable in the inspector you cannot use it directly. You have to use one of the provided subclasses (or derive your own). Properties | Improve this Doc View Source UseValue Gets or sets whether to use the value of this instance. Declaration public bool UseValue { get; set; } Property Value Type Description Boolean true if this value should be used; otherwise, false . | Improve this Doc View Source Value The value of this instance. It should only be used if UseValue is true. Otherwise, some other value should be used, or code that does not need it must be executed instead. Declaration public T Value { get; set; } Property Value Type Description T The value of this Optional instance. Examples This shows a typical example of how to use this class. if (optionalMaterial.UseValue) { renderer.material = material; } //else do not modify the material. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.OptionalFloat.html": {
    "href": "api/Sophia.OptionalFloat.html",
    "title": "Class OptionalFloat | Sophia",
    "keywords": "Class OptionalFloat Represents an optional float value. Inheritance Object Optional Optional < Single > OptionalFloat Inherited Members Optional<Single>.UseValue Optional<Single>.Value Optional<Single>.ToString() Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class OptionalFloat : Optional<float> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.OptionalGameObject.html": {
    "href": "api/Sophia.OptionalGameObject.html",
    "title": "Class OptionalGameObject | Sophia",
    "keywords": "Class OptionalGameObject Represents an optional GameObject. Inheritance Object Optional Optional < GameObject > OptionalGameObject Inherited Members Optional<GameObject>.UseValue Optional<GameObject>.Value Optional<GameObject>.ToString() Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class OptionalGameObject : Optional<GameObject> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.OptionalInt.html": {
    "href": "api/Sophia.OptionalInt.html",
    "title": "Class OptionalInt | Sophia",
    "keywords": "Class OptionalInt Represents an optional int value. Inheritance Object Optional Optional < Int32 > OptionalInt Inherited Members Optional<Int32>.UseValue Optional<Int32>.Value Optional<Int32>.ToString() Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class OptionalInt : Optional<int> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.OptionalMonoBehaviour.html": {
    "href": "api/Sophia.OptionalMonoBehaviour.html",
    "title": "Class OptionalMonoBehaviour | Sophia",
    "keywords": "Class OptionalMonoBehaviour Represents an optional MonoBehaviour. Inheritance Object Optional Optional < MonoBehaviour > OptionalMonoBehaviour Inherited Members Optional<MonoBehaviour>.UseValue Optional<MonoBehaviour>.Value Optional<MonoBehaviour>.ToString() Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class OptionalMonoBehaviour : Optional<MonoBehaviour> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.OptionalString.html": {
    "href": "api/Sophia.OptionalString.html",
    "title": "Class OptionalString | Sophia",
    "keywords": "Class OptionalString Represents an optional string value. Inheritance Object Optional Optional < String > OptionalString Inherited Members Optional<String>.UseValue Optional<String>.Value Optional<String>.ToString() Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class OptionalString : Optional<string> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.OptionalVector2.html": {
    "href": "api/Sophia.OptionalVector2.html",
    "title": "Class OptionalVector2 | Sophia",
    "keywords": "Class OptionalVector2 Represents an optional Vector2 value. Inheritance Object Optional Optional < Vector2 > OptionalVector2 Inherited Members Optional<Vector2>.UseValue Optional<Vector2>.Value Optional<Vector2>.ToString() Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class OptionalVector2 : Optional<Vector2> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.OptionalVector3.html": {
    "href": "api/Sophia.OptionalVector3.html",
    "title": "Class OptionalVector3 | Sophia",
    "keywords": "Class OptionalVector3 Represents an optional Vector3 value. Inheritance Object Optional Optional < Vector3 > OptionalVector3 Inherited Members Optional<Vector3>.UseValue Optional<Vector3>.Value Optional<Vector3>.ToString() Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class OptionalVector3 : Optional<Vector3> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.BaseSubject-1.html": {
    "href": "api/Sophia.Patterns.BaseSubject-1.html",
    "title": "Class BaseSubject<T> | Sophia",
    "keywords": "Class BaseSubject<T> Inheritance Object BaseSubject<T> EventSubject<T> Subject<T> Implements ISubject Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public abstract class BaseSubject<T> : object, ISubject Type Parameters Name Description T Constructors | Improve this Doc View Source BaseSubject() Constructor of the subject clas Declaration public BaseSubject() Properties | Improve this Doc View Source ObserverCount Declaration public int ObserverCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source attach(T) Attach a new observer to this subject Declaration public virtual void attach(T observer) Parameters Type Name Description T observer Observer to be attached | Improve this Doc View Source detach(T) Detach a specific observer from this subject Declaration public virtual void detach(T observer) Parameters Type Name Description T observer Observer to be detached | Improve this Doc View Source detachAll() Detach all observers from this subject Declaration public void detachAll() | Improve this Doc View Source getAs<TSubjectType>() Convert this subject to another type Declaration public TSubjectType getAs<TSubjectType>() where TSubjectType : class, ISubject Returns Type Description TSubjectType The requested subject type if convertible otherwise null. Type Parameters Name Description TSubjectType The subject type we would like to retrieve. | Improve this Doc View Source getObservers() A list of all observers Declaration protected List<T> getObservers() Returns Type Description List <T> The list of containing all observers Implements ISubject Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.EventSubject-1.html": {
    "href": "api/Sophia.Patterns.EventSubject-1.html",
    "title": "Class EventSubject<T> | Sophia",
    "keywords": "Class EventSubject<T> Inheritance Object BaseSubject <T> EventSubject<T> Implements ISubject Inherited Members BaseSubject<T>.ObserverCount BaseSubject<T>.attach(T) BaseSubject<T>.detach(T) BaseSubject<T>.detachAll() BaseSubject<T>.getAs<TSubjectType>() BaseSubject<T>.getObservers() Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public class EventSubject<T> : BaseSubject<T>, ISubject where T : IEventObserver Type Parameters Name Description T Methods | Improve this Doc View Source notify(IEvent) Notify all observers something happened Declaration public virtual bool notify(IEvent evt) Parameters Type Name Description IEvent evt The event that occured Returns Type Description Boolean Implements ISubject Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.FiniteStateMachine.html": {
    "href": "api/Sophia.Patterns.FiniteStateMachine.html",
    "title": "Class FiniteStateMachine | Sophia",
    "keywords": "Class FiniteStateMachine A finite state machine. Inheritance Object FiniteStateMachine Implements IStateMachine Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public class FiniteStateMachine : object, IStateMachine Constructors | Improve this Doc View Source FiniteStateMachine() Create a finite state machine. Declaration public FiniteStateMachine() Properties | Improve this Doc View Source CurrentState The current state. Declaration public FSMState CurrentState { get; } Property Value Type Description FSMState | Improve this Doc View Source IsRunning Declaration public bool IsRunning { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source addState(String, Boolean) Add a state. Declaration public void addState(string name, bool startState) Parameters Type Name Description String name The name of the state Boolean startState true if this state is the start state | Improve this Doc View Source addState(String, Boolean, Action, Action, Action) Add a state. Declaration public void addState(string name, bool startState, Action tickAction, Action enterAction, Action exitAction) Parameters Type Name Description String name The name of the state Boolean startState true if this state is the start state Action tickAction An action called when the state is ticked Action enterAction An action called when entering the state Action exitAction An action called when exiting the state | Improve this Doc View Source addTransition(String, String, FSMEvent) Add a transition. Declaration public void addTransition(string source, string target, FSMEvent trigger) Parameters Type Name Description String source The source state name. String target The target state name. FSMEvent trigger | Improve this Doc View Source addTransition(String, String, FSMEvent, Action<FSMEvent, FSMState>) Add a transition. Declaration public void addTransition(string source, string target, FSMEvent trigger, Action<FSMEvent, FSMState> action) Parameters Type Name Description String source The source state name. String target The target state name. FSMEvent trigger Action < FSMEvent , FSMState > action An action callback to be called if this transition is triggered. | Improve this Doc View Source addTransition(String, String, FSMEvent, Guard) Add a transition. Declaration public void addTransition(string source, string target, FSMEvent trigger, Guard guard) Parameters Type Name Description String source The source state name. String target The target state name. FSMEvent trigger Guard guard The guard predicate for this transition. | Improve this Doc View Source addTransition(String, String, FSMEvent, Guard, Action<FSMEvent, FSMState>) Add a transition. Declaration public void addTransition(string source, string target, FSMEvent trigger, Guard guard, Action<FSMEvent, FSMState> action) Parameters Type Name Description String source The source state name. String target The target state name. FSMEvent trigger Guard guard Action < FSMEvent , FSMState > action An action callback to be called if this transition is triggered. | Improve this Doc View Source registerEvent(String) Register a new event Declaration public FSMEvent registerEvent(string name) Parameters Type Name Description String name The name of the event Returns Type Description FSMEvent | Improve this Doc View Source reset() Reset this FSM to the start state. Declaration public void reset() | Improve this Doc View Source start() Enters the start state. Declaration public void start() | Improve this Doc View Source stop() Stop updating this statemachine Declaration public void stop() | Improve this Doc View Source triggerEvent(String) Trigger an event. If a transition exists for this event name in the current state, the state will change to the transition's target state. Declaration public void triggerEvent(string eventName) Parameters Type Name Description String eventName The event name. | Improve this Doc View Source update() Tick the current state's update action (if any). Declaration public void update() Implements IStateMachine Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.FSMEvent.html": {
    "href": "api/Sophia.Patterns.FSMEvent.html",
    "title": "Class FSMEvent | Sophia",
    "keywords": "Class FSMEvent Inheritance Object FSMEvent Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public class FSMEvent : object Constructors | Improve this Doc View Source FSMEvent(Int32, String) Create a new event Declaration public FSMEvent(int id, string name) Parameters Type Name Description Int32 id ID of the event String name Name of the event Properties | Improve this Doc View Source Name The name of the event Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source Equals(Object) Check if an event equals another event Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other event Returns Type Description Boolean True if we are equal, false otherwise | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.FSMState.html": {
    "href": "api/Sophia.Patterns.FSMState.html",
    "title": "Class FSMState | Sophia",
    "keywords": "Class FSMState A state in a finite state machine. Inheritance Object FSMState Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public class FSMState : object Constructors | Improve this Doc View Source FSMState(String, Action, Action, Action) Create a new state Declaration public FSMState(string name, Action tickAction, Action enterAction, Action exitAction) Parameters Type Name Description String name Name of the state Action tickAction Action to trigger when we update the state Action enterAction Action to trigger when we enter a state Action exitAction Action to trigger when we exit a state Properties | Improve this Doc View Source Name The name of the state. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source addTransition(FSMTransition) Add a new transition to this state Declaration public void addTransition(FSMTransition transition) Parameters Type Name Description FSMTransition transition The transition we want to add | Improve this Doc View Source fireEnterAction() Execute the enter action when we start the state Declaration public void fireEnterAction() | Improve this Doc View Source fireExitAction() Execute the exit action when we exit the state Declaration public void fireExitAction() | Improve this Doc View Source triggerEvent(FSMEvent) Trigger an event on this state This will execute a transition to a different ( or the same ) state. Declaration public FSMState triggerEvent(FSMEvent trigger) Parameters Type Name Description FSMEvent trigger The event we want to trigger Returns Type Description FSMState The new state we are in | Improve this Doc View Source update() Update this state Declaration public void update() Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.FSMTransition.html": {
    "href": "api/Sophia.Patterns.FSMTransition.html",
    "title": "Class FSMTransition | Sophia",
    "keywords": "Class FSMTransition A transition from one state to another. Inheritance Object FSMTransition Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public class FSMTransition : object Constructors | Improve this Doc View Source FSMTransition(FSMEvent, FSMState, Guard, Action<FSMEvent, FSMState>) Create a new transition Declaration public FSMTransition(FSMEvent trigger, FSMState target, Guard guard, Action<FSMEvent, FSMState> action) Parameters Type Name Description FSMEvent trigger The trigger for this transition FSMState target The target state we will transition to Guard guard The function that will check if we can transition Action < FSMEvent , FSMState > action The action we want to execture when we tranition Properties | Improve this Doc View Source Target The target state after the transition occurs. Declaration public FSMState Target { get; } Property Value Type Description FSMState | Improve this Doc View Source Trigger The name of the event triggering the transition. Declaration public FSMEvent Trigger { get; } Property Value Type Description FSMEvent Methods | Improve this Doc View Source checkGuard() Can we transition Declaration public bool checkGuard() Returns Type Description Boolean | Improve this Doc View Source fireAction() Execute an action when we transition Declaration public void fireAction() Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.Guard.html": {
    "href": "api/Sophia.Patterns.Guard.html",
    "title": "Delegate Guard | Sophia",
    "keywords": "Delegate Guard Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public delegate bool Guard(FSMEvent trigger, FSMState newState); Parameters Type Name Description FSMEvent trigger FSMState newState Returns Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.html": {
    "href": "api/Sophia.Patterns.html",
    "title": "Namespace Sophia.Patterns | Sophia",
    "keywords": "Namespace Sophia.Patterns Classes BaseSubject<T> EventSubject<T> FiniteStateMachine A finite state machine. FSMEvent FSMState A state in a finite state machine. FSMTransition A transition from one state to another. Singleton<T> Subject<T> Interfaces ICommand ICommandReceiver IEventObserver IObserver IStateMachine ISubject Delegates Guard"
  },
  "api/Sophia.Patterns.ICommand.html": {
    "href": "api/Sophia.Patterns.ICommand.html",
    "title": "Interface ICommand | Sophia",
    "keywords": "Interface ICommand Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public interface ICommand Methods | Improve this Doc View Source execute(ICommandReceiver) Declaration bool execute(ICommandReceiver receiver) Parameters Type Name Description ICommandReceiver receiver Returns Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.ICommandReceiver.html": {
    "href": "api/Sophia.Patterns.ICommandReceiver.html",
    "title": "Interface ICommandReceiver | Sophia",
    "keywords": "Interface ICommandReceiver Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public interface ICommandReceiver Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.IEventObserver.html": {
    "href": "api/Sophia.Patterns.IEventObserver.html",
    "title": "Interface IEventObserver | Sophia",
    "keywords": "Interface IEventObserver Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public interface IEventObserver Properties | Improve this Doc View Source EventCategory If the event that is fired is equal to the eventcategory of the handler The event will be passed along, otherwise this handler will be skipped Declaration int EventCategory { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source notify(ISubject, IEvent) Called when a subject is broadcasting an event. Declaration bool notify(ISubject subject, IEvent evt) Parameters Type Name Description ISubject subject The sender IEvent evt The event that occured Returns Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.IObserver.html": {
    "href": "api/Sophia.Patterns.IObserver.html",
    "title": "Interface IObserver | Sophia",
    "keywords": "Interface IObserver Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public interface IObserver Methods | Improve this Doc View Source notify(ISubject) Called when a subject is broadcasting an event. Declaration bool notify(ISubject subject) Parameters Type Name Description ISubject subject The sender Returns Type Description Boolean Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.IStateMachine.html": {
    "href": "api/Sophia.Patterns.IStateMachine.html",
    "title": "Interface IStateMachine | Sophia",
    "keywords": "Interface IStateMachine Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public interface IStateMachine Methods | Improve this Doc View Source reset() Declaration void reset() | Improve this Doc View Source start() Declaration void start() | Improve this Doc View Source stop() Declaration void stop() | Improve this Doc View Source update() Declaration void update() Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.ISubject.html": {
    "href": "api/Sophia.Patterns.ISubject.html",
    "title": "Interface ISubject | Sophia",
    "keywords": "Interface ISubject Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public interface ISubject Properties | Improve this Doc View Source ObserverCount Declaration int ObserverCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source detachAll() Declaration void detachAll() | Improve this Doc View Source getAs<TSubjectType>() Declaration TSubjectType getAs<TSubjectType>() where TSubjectType : class, ISubject Returns Type Description TSubjectType Type Parameters Name Description TSubjectType Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.Singleton-1.html": {
    "href": "api/Sophia.Patterns.Singleton-1.html",
    "title": "Class Singleton<T> | Sophia",
    "keywords": "Class Singleton<T> Inheritance Object Singleton<T> Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public class Singleton<T> : object where T : class, new() Type Parameters Name Description T Properties | Improve this Doc View Source Instance Declaration public static T Instance { get; } Property Value Type Description T Methods | Improve this Doc View Source createInstance() Create the singleton instance Declaration public static void createInstance() | Improve this Doc View Source destroyInstance() Destroy the singleton instance Declaration public static void destroyInstance() | Improve this Doc View Source getAs<U>() Convert the singleton to an inherited type Declaration public static U getAs<U>() where U : class, new() Returns Type Description U The requested object Type Parameters Name Description U The type we wanna retrieve Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Patterns.Subject-1.html": {
    "href": "api/Sophia.Patterns.Subject-1.html",
    "title": "Class Subject<T> | Sophia",
    "keywords": "Class Subject<T> Inheritance Object BaseSubject <T> Subject<T> Implements ISubject Inherited Members BaseSubject<T>.ObserverCount BaseSubject<T>.attach(T) BaseSubject<T>.detach(T) BaseSubject<T>.detachAll() BaseSubject<T>.getAs<TSubjectType>() BaseSubject<T>.getObservers() Namespace : Sophia.Patterns Assembly : Sophia.Core.dll Syntax public class Subject<T> : BaseSubject<T>, ISubject where T : IObserver Type Parameters Name Description T Methods | Improve this Doc View Source notify() Notify all observers something happened Declaration public virtual bool notify() Returns Type Description Boolean Implements ISubject Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.PhysxMonoBehaviour.html": {
    "href": "api/Sophia.PhysxMonoBehaviour.html",
    "title": "Class PhysxMonoBehaviour | Sophia",
    "keywords": "Class PhysxMonoBehaviour Inheritance Object Object Component Behaviour MonoBehaviour BaseMonoBehaviour PhysxMonoBehaviour Inherited Members BaseMonoBehaviour.transform BaseMonoBehaviour.gameObject BaseMonoBehaviour.changeLayersRecursively(Transform, String) BaseMonoBehaviour.changeLayersRecursively(Transform, Int32) BaseMonoBehaviour.instantiate<T>(T, GameObject) BaseMonoBehaviour.instantiate<T>(T, GameObject, Vector3, Quaternion) BaseMonoBehaviour.instantiate(GameObject) BaseMonoBehaviour.instantiate(GameObject, Vector3, Quaternion) BaseMonoBehaviour.instantiate(GameObject, GameObject) BaseMonoBehaviour.findObjectsOfInterface<I>() BaseMonoBehaviour.Invoke(Action, Single) BaseMonoBehaviour.InvokeRepeating(Action, Single, Single) BaseMonoBehaviour.DestroyUniversal(Object) BaseMonoBehaviour.getRequiredComponent<T>() BaseMonoBehaviour.getRequiredComponentInChilderen<T>() BaseMonoBehaviour.getRequiredComponentsInChilderen<T>() BaseMonoBehaviour.getRequiredComponentInParent<T>() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.tag UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.networkView UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.ToString() Object.name Object.hideFlags Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class PhysxMonoBehaviour : BaseMonoBehaviour Properties | Improve this Doc View Source rigidbody Declaration public Rigidbody rigidbody { get; } Property Value Type Description Rigidbody Extension Methods MonoBehaviourExtensions.Clone<T>(T) MonoBehaviourExtensions.Clone<T>(T, Int32) MonoBehaviourExtensions.FindChild(Component, String) MonoBehaviourExtensions.FindChildRecursively(Component, String) MonoBehaviourExtensions.GetInterfaceComponent<TInterface>(Component) MonoBehaviourExtensions.Invoke(MonoBehaviour, Action, Single) MonoBehaviourExtensions.InvokeRepeating(MonoBehaviour, Action, Single, Single) ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Random.html": {
    "href": "api/Sophia.Random.html",
    "title": "Class Random | Sophia",
    "keywords": "Class Random Some convenience functions for random booleans and integers. Inheritance Object Random Namespace : Sophia Assembly : Sophia.Core.dll Syntax public static class Random : object Fields | Improve this Doc View Source g_Random Globally accessible object for random calls Declaration public static readonly IRandom g_Random Field Value Type Description IRandom Methods | Improve this Doc View Source boolean(Single) Generates a random bool, true with the given probability. Declaration public static bool boolean(float probability) Parameters Type Name Description Single probability Returns Type Description Boolean | Improve this Doc View Source getRandom() Gets a new random generator. Declaration public static IRandom getRandom() Returns Type Description IRandom A new random generator | Improve this Doc View Source getRandom(Int32) Gets a new random generator. Declaration public static IRandom getRandom(int seed) Parameters Type Name Description Int32 seed The seed to instantiate the generator with. Returns Type Description IRandom A seeded instance of a random generator. | Improve this Doc View Source randomOffset(Single, Single) Gives a random value within a given range centered around a given value. Declaration public static float randomOffset(float value, float range) Parameters Type Name Description Single value The value around which the random values will be centered. Single range The range of the returned value. Returns Type Description Single A random value between value - range/2 and value + range/2. | Improve this Doc View Source range(Int32) Generates a Random integer between 0 inclusive and the given max, exclusive. Declaration public static int range(int max) Parameters Type Name Description Int32 max Returns Type Description Int32 | Improve this Doc View Source range(Int32, Int32) Generates a Random integer between the given min inclusive and the given max, exclusive. Declaration public static int range(int min, int max) Parameters Type Name Description Int32 min Int32 max Returns Type Description Int32 | Improve this Doc View Source range(Single) Generates a Random float between 0.0f inclusive and the given max Declaration public static float range(float max) Parameters Type Name Description Single max Returns Type Description Single | Improve this Doc View Source range(Single, Single) Generates a Random float between the given min inclusive and the given max, exclusive. Declaration public static float range(float min, float max) Parameters Type Name Description Single min Single max Returns Type Description Single | Improve this Doc View Source sign() Generates either -1.0f or 1.0f randomly. Declaration public static float sign() Returns Type Description Single"
  },
  "api/Sophia.ReadOnlyAttribute.html": {
    "href": "api/Sophia.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | Sophia",
    "keywords": "Class ReadOnlyAttribute Used to mark inspectable fields as read-only (that is, making them uneditable, even if they are visible). Inheritance Object PropertyAttribute ReadOnlyAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class ReadOnlyAttribute : PropertyAttribute Extension Methods ObjectExtensions.ThrowIfNull(Object, String) See Also PropertyAttribute"
  },
  "api/Sophia.ScreenshotTaker.html": {
    "href": "api/Sophia.ScreenshotTaker.html",
    "title": "Class ScreenshotTaker | Sophia",
    "keywords": "Class ScreenshotTaker A component that makes it easy to take screenshots, usually for development purposes. Inheritance Object Object Component Behaviour MonoBehaviour BaseMonoBehaviour MonoBehaviourSingleton < ScreenshotTaker > ScreenshotTaker Inherited Members MonoBehaviourSingleton<ScreenshotTaker>.Instance MonoBehaviourSingleton<ScreenshotTaker>.getAs<U>() BaseMonoBehaviour.transform BaseMonoBehaviour.gameObject BaseMonoBehaviour.changeLayersRecursively(Transform, String) BaseMonoBehaviour.changeLayersRecursively(Transform, Int32) BaseMonoBehaviour.instantiate<T>(T, GameObject) BaseMonoBehaviour.instantiate<T>(T, GameObject, Vector3, Quaternion) BaseMonoBehaviour.instantiate(GameObject) BaseMonoBehaviour.instantiate(GameObject, Vector3, Quaternion) BaseMonoBehaviour.instantiate(GameObject, GameObject) BaseMonoBehaviour.findObjectsOfInterface<I>() BaseMonoBehaviour.Invoke(Action, Single) BaseMonoBehaviour.InvokeRepeating(Action, Single, Single) BaseMonoBehaviour.DestroyUniversal(Object) BaseMonoBehaviour.getRequiredComponent<T>() BaseMonoBehaviour.getRequiredComponentInChilderen<T>() BaseMonoBehaviour.getRequiredComponentsInChilderen<T>() BaseMonoBehaviour.getRequiredComponentInParent<T>() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) UnityEngine.MonoBehaviour.StartCoroutine(System.String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) UnityEngine.Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) UnityEngine.Component.GetComponentsInChildren(System.Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) UnityEngine.Component.GetComponentsInParent(System.Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) UnityEngine.Component.SendMessageUpwards(System.String, System.Object) UnityEngine.Component.SendMessageUpwards(System.String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) UnityEngine.Component.BroadcastMessage(System.String, System.Object) UnityEngine.Component.BroadcastMessage(System.String) Component.BroadcastMessage(String, SendMessageOptions) Component.tag UnityEngine.Component.rigidbody UnityEngine.Component.rigidbody2D UnityEngine.Component.camera UnityEngine.Component.light UnityEngine.Component.animation UnityEngine.Component.constantForce UnityEngine.Component.renderer UnityEngine.Component.audio UnityEngine.Component.networkView UnityEngine.Component.collider UnityEngine.Component.collider2D UnityEngine.Component.hingeJoint UnityEngine.Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) UnityEngine.Object.Destroy(UnityEngine.Object) Object.DestroyImmediate(Object, Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.ToString() Object.name Object.hideFlags Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public sealed class ScreenshotTaker : MonoBehaviourSingleton<ScreenshotTaker> Properties | Improve this Doc View Source ShouldDestroyOnLoad Declaration protected override bool ShouldDestroyOnLoad { get; } Property Value Type Description Boolean Overrides Sophia.MonoBehaviourSingleton<Sophia.ScreenshotTaker>.ShouldDestroyOnLoad Methods | Improve this Doc View Source onAwake() Declaration protected override void onAwake() Overrides Sophia.MonoBehaviourSingleton<Sophia.ScreenshotTaker>.onAwake() | Improve this Doc View Source onDestroy() Declaration protected override void onDestroy() Overrides Sophia.MonoBehaviourSingleton<Sophia.ScreenshotTaker>.onDestroy() | Improve this Doc View Source onStart() Declaration protected override void onStart() Overrides Sophia.MonoBehaviourSingleton<Sophia.ScreenshotTaker>.onStart() | Improve this Doc View Source onUpdate(Single) Declaration protected override void onUpdate(float dTime) Parameters Type Name Description Single dTime Overrides Sophia.MonoBehaviourSingleton<Sophia.ScreenshotTaker>.onUpdate(System.Single) | Improve this Doc View Source Take() Declaration public static void Take() | Improve this Doc View Source TakeClean() Declaration public static void TakeClean() Extension Methods MonoBehaviourExtensions.Clone<T>(T) MonoBehaviourExtensions.Clone<T>(T, Int32) MonoBehaviourExtensions.FindChild(Component, String) MonoBehaviourExtensions.FindChildRecursively(Component, String) MonoBehaviourExtensions.GetInterfaceComponent<TInterface>(Component) MonoBehaviourExtensions.Invoke(MonoBehaviour, Action, Single) MonoBehaviourExtensions.InvokeRepeating(MonoBehaviour, Action, Single, Single) ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Started.html": {
    "href": "api/Sophia.Started.html",
    "title": "Delegate Started | Sophia",
    "keywords": "Delegate Started Namespace : Sophia Assembly : Sophia.Core.dll Syntax public delegate void Started(Guid timerID); Parameters Type Name Description Guid timerID Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Stopped.html": {
    "href": "api/Sophia.Stopped.html",
    "title": "Delegate Stopped | Sophia",
    "keywords": "Delegate Stopped Namespace : Sophia Assembly : Sophia.Core.dll Syntax public delegate void Stopped(Guid timerID); Parameters Type Name Description Guid timerID Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.StringList.html": {
    "href": "api/Sophia.StringList.html",
    "title": "Class StringList | Sophia",
    "keywords": "Class StringList An InspectorList of type string . Inheritance Object InspectorList InspectorList < String > StringList Implements IList < String > Inherited Members InspectorList<String>.Count InspectorList<String>.IsReadOnly InspectorList<String>.Item[Int32] InspectorList<String>.GetEnumerator() InspectorList<String>.Add(String) InspectorList<String>.Clear() InspectorList<String>.Contains(String) InspectorList<String>.CopyTo(String[], Int32) InspectorList<String>.Remove(String) InspectorList<String>.IndexOf(String) InspectorList<String>.Insert(Int32, String) InspectorList<String>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class StringList : InspectorList<string>, IList<string> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Threading.html": {
    "href": "api/Sophia.Threading.html",
    "title": "Namespace Sophia.Threading | Sophia",
    "keywords": "Namespace Sophia.Threading Classes Task Interfaces ITask Delegates Task.Finished Task.Started"
  },
  "api/Sophia.Threading.ITask.html": {
    "href": "api/Sophia.Threading.ITask.html",
    "title": "Interface ITask | Sophia",
    "keywords": "Interface ITask Namespace : Sophia.Threading Assembly : Sophia.Core.dll Syntax public interface ITask Methods | Improve this Doc View Source execute() Declaration void execute() Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Threading.Task.Finished.html": {
    "href": "api/Sophia.Threading.Task.Finished.html",
    "title": "Delegate Task.Finished | Sophia",
    "keywords": "Delegate Task.Finished Namespace : Sophia.Threading Assembly : Sophia.Core.dll Syntax public delegate void Finished(Task task); Parameters Type Name Description Task task Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Threading.Task.html": {
    "href": "api/Sophia.Threading.Task.html",
    "title": "Class Task | Sophia",
    "keywords": "Class Task Inheritance Object Task Namespace : Sophia.Threading Assembly : Sophia.Core.dll Syntax public abstract class Task : object Constructors | Improve this Doc View Source Task() Declaration protected Task() | Improve this Doc View Source Task(Logger) Declaration protected Task(Logger logger) Parameters Type Name Description Logger logger Fields | Improve this Doc View Source onFinished Declaration public Task.Finished onFinished Field Value Type Description Task.Finished | Improve this Doc View Source onStarted Declaration public Task.Started onStarted Field Value Type Description Task.Started Properties | Improve this Doc View Source Logger Declaration protected Logger Logger { get; } Property Value Type Description Logger Methods | Improve this Doc View Source execute() Declaration public abstract void execute() Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Threading.Task.Started.html": {
    "href": "api/Sophia.Threading.Task.Started.html",
    "title": "Delegate Task.Started | Sophia",
    "keywords": "Delegate Task.Started Namespace : Sophia.Threading Assembly : Sophia.Core.dll Syntax public delegate void Started(Task task); Parameters Type Name Description Task task Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.TimerCreationInfo.html": {
    "href": "api/Sophia.TimerCreationInfo.html",
    "title": "Struct TimerCreationInfo | Sophia",
    "keywords": "Struct TimerCreationInfo Namespace : Sophia Assembly : Sophia.Core.dll Syntax public struct TimerCreationInfo Fields | Improve this Doc View Source finish_behaviour Declaration public TimerFinishedBehaviour finish_behaviour Field Value Type Description TimerFinishedBehaviour | Improve this Doc View Source finished_delegate Declaration public Finished finished_delegate Field Value Type Description Finished | Improve this Doc View Source start_on_creation Declaration public bool start_on_creation Field Value Type Description Boolean | Improve this Doc View Source start_time Declaration public float start_time Field Value Type Description Single | Improve this Doc View Source started_delegate Declaration public Started started_delegate Field Value Type Description Started | Improve this Doc View Source stopped_delegate Declaration public Stopped stopped_delegate Field Value Type Description Stopped | Improve this Doc View Source updated_delegate Declaration public Updated updated_delegate Field Value Type Description Updated"
  },
  "api/Sophia.TimerEventInfo.html": {
    "href": "api/Sophia.TimerEventInfo.html",
    "title": "Struct TimerEventInfo | Sophia",
    "keywords": "Struct TimerEventInfo Namespace : Sophia Assembly : Sophia.Core.dll Syntax public struct TimerEventInfo Fields | Improve this Doc View Source finished_delegate Declaration public Finished finished_delegate Field Value Type Description Finished | Improve this Doc View Source started_delegate Declaration public Started started_delegate Field Value Type Description Started | Improve this Doc View Source stopped_delegate Declaration public Stopped stopped_delegate Field Value Type Description Stopped | Improve this Doc View Source updated_delegate Declaration public Updated updated_delegate Field Value Type Description Updated"
  },
  "api/Sophia.TimerFinishedBehaviour.html": {
    "href": "api/Sophia.TimerFinishedBehaviour.html",
    "title": "Enum TimerFinishedBehaviour | Sophia",
    "keywords": "Enum TimerFinishedBehaviour Namespace : Sophia Assembly : Sophia.Core.dll Syntax public enum TimerFinishedBehaviour : int Fields Name Description NONE REMOVE_ON_FINISHED RESET_START_ON_FINSHED RESET_STOP_ON_FINISHED"
  },
  "api/Sophia.TimerManager.html": {
    "href": "api/Sophia.TimerManager.html",
    "title": "Class TimerManager | Sophia",
    "keywords": "Class TimerManager Inheritance Object TimerManager Namespace : Sophia Assembly : Sophia.Core.dll Syntax public class TimerManager : object Constructors | Improve this Doc View Source TimerManager() Declaration public TimerManager() Methods | Improve this Doc View Source addTime(Guid, Single) Declaration public void addTime(Guid id, float time) Parameters Type Name Description Guid id Single time | Improve this Doc View Source createRemoveOnFinishedCreationInfo(Single) Declaration public static TimerCreationInfo createRemoveOnFinishedCreationInfo(float startTime) Parameters Type Name Description Single startTime Returns Type Description TimerCreationInfo | Improve this Doc View Source createRemoveOnFinishedCreationInfo(Single, Boolean) Declaration public static TimerCreationInfo createRemoveOnFinishedCreationInfo(float startTime, bool startOnCreation) Parameters Type Name Description Single startTime Boolean startOnCreation Returns Type Description TimerCreationInfo | Improve this Doc View Source createRemoveOnFinishedCreationInfo(Single, Boolean, Finished) Declaration public static TimerCreationInfo createRemoveOnFinishedCreationInfo(float startTime, bool startOnCreation, Finished finishedDelegate) Parameters Type Name Description Single startTime Boolean startOnCreation Finished finishedDelegate Returns Type Description TimerCreationInfo | Improve this Doc View Source createRemoveOnFinishedCreationInfo(Single, Boolean, TimerEventInfo) Declaration public static TimerCreationInfo createRemoveOnFinishedCreationInfo(float startTime, bool startOnCreation, TimerEventInfo eventInfo) Parameters Type Name Description Single startTime Boolean startOnCreation TimerEventInfo eventInfo Returns Type Description TimerCreationInfo | Improve this Doc View Source createResetOnFinishedCreationInfo(Single, Boolean) Declaration public static TimerCreationInfo createResetOnFinishedCreationInfo(float startTime, bool shouldStartOnReset) Parameters Type Name Description Single startTime Boolean shouldStartOnReset Returns Type Description TimerCreationInfo | Improve this Doc View Source createResetOnFinishedCreationInfo(Single, Boolean, Boolean) Declaration public static TimerCreationInfo createResetOnFinishedCreationInfo(float startTime, bool shouldStartOnReset, bool startOnCreation) Parameters Type Name Description Single startTime Boolean shouldStartOnReset Boolean startOnCreation Returns Type Description TimerCreationInfo | Improve this Doc View Source createResetOnFinishedCreationInfo(Single, Boolean, Boolean, Finished) Declaration public static TimerCreationInfo createResetOnFinishedCreationInfo(float startTime, bool shouldStartOnReset, bool startOnCreation, Finished finishedDelegate) Parameters Type Name Description Single startTime Boolean shouldStartOnReset Boolean startOnCreation Finished finishedDelegate Returns Type Description TimerCreationInfo | Improve this Doc View Source createResetOnFinishedCreationInfo(Single, Boolean, Boolean, TimerEventInfo) Declaration public static TimerCreationInfo createResetOnFinishedCreationInfo(float startTime, bool shouldStartOnReset, bool startOnCreation, TimerEventInfo eventInfo) Parameters Type Name Description Single startTime Boolean shouldStartOnReset Boolean startOnCreation TimerEventInfo eventInfo Returns Type Description TimerCreationInfo | Improve this Doc View Source createTimer<T>(TimerCreationInfo) Declaration public Guid createTimer<T>(TimerCreationInfo createionInfo) where T : ITimer, new() Parameters Type Name Description TimerCreationInfo createionInfo Returns Type Description Guid Type Parameters Name Description T | Improve this Doc View Source getTimer(Guid) Declaration public ITimer getTimer(Guid timerID) Parameters Type Name Description Guid timerID Returns Type Description ITimer | Improve this Doc View Source isTimerPaused(Guid) Declaration public bool isTimerPaused(Guid id) Parameters Type Name Description Guid id Returns Type Description Boolean | Improve this Doc View Source isTimerRunning(Guid) Declaration public bool isTimerRunning(Guid id) Parameters Type Name Description Guid id Returns Type Description Boolean | Improve this Doc View Source startTimer(Guid, Boolean) Declaration public void startTimer(Guid id, bool reset) Parameters Type Name Description Guid id Boolean reset | Improve this Doc View Source stopTimer(Guid) Declaration public void stopTimer(Guid id) Parameters Type Name Description Guid id | Improve this Doc View Source togglePauseTimer(Guid) Declaration public void togglePauseTimer(Guid id) Parameters Type Name Description Guid id | Improve this Doc View Source update(Single) Declaration public void update(float dTime) Parameters Type Name Description Single dTime Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Updated.html": {
    "href": "api/Sophia.Updated.html",
    "title": "Delegate Updated | Sophia",
    "keywords": "Delegate Updated Namespace : Sophia Assembly : Sophia.Core.dll Syntax public delegate void Updated(Guid timerID, float time); Parameters Type Name Description Guid timerID Single time Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Vector2List.html": {
    "href": "api/Sophia.Vector2List.html",
    "title": "Class Vector2List | Sophia",
    "keywords": "Class Vector2List An InspectorList of type Vector2 . Inheritance Object InspectorList InspectorList < Vector2 > Vector2List Implements IList < Vector2 > Inherited Members InspectorList<Vector2>.Count InspectorList<Vector2>.IsReadOnly InspectorList<Vector2>.Item[Int32] InspectorList<Vector2>.GetEnumerator() InspectorList<Vector2>.Add(Vector2) InspectorList<Vector2>.Clear() InspectorList<Vector2>.Contains(Vector2) InspectorList<Vector2>.CopyTo(Vector2[], Int32) InspectorList<Vector2>.Remove(Vector2) InspectorList<Vector2>.IndexOf(Vector2) InspectorList<Vector2>.Insert(Int32, Vector2) InspectorList<Vector2>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class Vector2List : InspectorList<Vector2>, IList<Vector2> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Vector3List.html": {
    "href": "api/Sophia.Vector3List.html",
    "title": "Class Vector3List | Sophia",
    "keywords": "Class Vector3List An InspectorList of type Vector3 . Inheritance Object InspectorList InspectorList < Vector3 > Vector3List Implements IList < Vector3 > Inherited Members InspectorList<Vector3>.Count InspectorList<Vector3>.IsReadOnly InspectorList<Vector3>.Item[Int32] InspectorList<Vector3>.GetEnumerator() InspectorList<Vector3>.Add(Vector3) InspectorList<Vector3>.Clear() InspectorList<Vector3>.Contains(Vector3) InspectorList<Vector3>.CopyTo(Vector3[], Int32) InspectorList<Vector3>.Remove(Vector3) InspectorList<Vector3>.IndexOf(Vector3) InspectorList<Vector3>.Insert(Int32, Vector3) InspectorList<Vector3>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class Vector3List : InspectorList<Vector3>, IList<Vector3> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.Vector4List.html": {
    "href": "api/Sophia.Vector4List.html",
    "title": "Class Vector4List | Sophia",
    "keywords": "Class Vector4List An InspectorList of type Vector4 . Inheritance Object InspectorList InspectorList < Vector4 > Vector4List Implements IList < Vector4 > Inherited Members InspectorList<Vector4>.Count InspectorList<Vector4>.IsReadOnly InspectorList<Vector4>.Item[Int32] InspectorList<Vector4>.GetEnumerator() InspectorList<Vector4>.Add(Vector4) InspectorList<Vector4>.Clear() InspectorList<Vector4>.Contains(Vector4) InspectorList<Vector4>.CopyTo(Vector4[], Int32) InspectorList<Vector4>.Remove(Vector4) InspectorList<Vector4>.IndexOf(Vector4) InspectorList<Vector4>.Insert(Int32, Vector4) InspectorList<Vector4>.RemoveAt(Int32) Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class Vector4List : InspectorList<Vector4>, IList<Vector4> Implements IList<> Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "api/Sophia.WarningIfNullAttribute.html": {
    "href": "api/Sophia.WarningIfNullAttribute.html",
    "title": "Class WarningIfNullAttribute | Sophia",
    "keywords": "Class WarningIfNullAttribute Mark fields in a MonoBehaviour with this attribute to give a specific warning when the field is not set. Inheritance Object PropertyAttribute WarningIfNullAttribute Inherited Members PropertyAttribute.order Namespace : Sophia Assembly : Sophia.Platform.dll Syntax public class WarningIfNullAttribute : PropertyAttribute Examples public class MyMonoBehaviour : MonoBehaviour { [WarningIfNull(\"Assign the prefab\")] public GameObject playerPrefab; //... } Constructors | Improve this Doc View Source WarningIfNullAttribute(String) Initializes a new instance of the WarningIfNullAttribute class. Declaration public WarningIfNullAttribute(string warningMessage) Parameters Type Name Description String warningMessage The warning message to display when the marked field is null. Properties | Improve this Doc View Source WarningMessage Gets the warning message. Declaration public string WarningMessage { get; } Property Value Type Description String The warning message. Extension Methods ObjectExtensions.ThrowIfNull(Object, String)"
  },
  "index.html": {
    "href": "index.html",
    "title": "Sophia | Sophia",
    "keywords": "Sophia Sophia is an early-stage library used by the research team of Digital Arts and Entertainment . Getting Started Simply download the latest .unitypackage from here and double click it to import it into Unity. Compatibility Make sure to check the release notes regarding breaking changes in backwards combability. Although the packages have been build for Unity 2019, it is possible that it may work with older versions. Issues and missing features If there are any issues, bugs or features that are missing. Please open an issue on the GitHub issues page . Special thanks This repository structure has heavily been inspired by the MLAPI repository maintained by TwoTenPvP ."
  }
}